<?xml version="1.0"?>

<project xmlns:xdm="http://www.netspective.org/Framework/Commons/XMLDataModel">

    <xdm:include resource="com/netspective/commons/conf/commons.xml"/>
    <xdm:include resource="com/netspective/axiom/conf/axiom.xml"/>
    <xdm:include resource="com/netspective/sparx/conf/sparx.xml"/>
    <xdm:include resource="com/netspective/sparx/conf/console.xml"/>

    <xdm:include file="forms-input.xml"/>
    <xdm:include file="forms-exec.xml"/>

    <!--
       ======================================
       Application theme setting
       ======================================
    -->
    <default-theme>sampler</default-theme>

    <!-- a special template processor that will just show a table of contents for its children
         * we set xdm:replace-template-expressions to no so that ${xxx} variables aren't handled by XDM (since they
           are freemarker variables). -->
    <template-processor-type name="container" extends="freemarker" xdm:replace-template-expressions="no">
        <![CDATA[
        <#include "*/macros.ftl"/>
        <div class="textbox">
        ${vc.navigationContext.activePage.summary?default("No summary available for ${vc.navigationContext.activePage.qualifiedNameIncludingTreeId}. Please supply one using &lt;summary&gt; tag.")}
        <p>
        <@pageChildren/>
        </div>
        <@footer/>
        ]]>
    </template-processor-type>

    <!--
       ===================================================================
       This is the navigation tree structure defined for the application.
       ===================================================================
    -->
    <navigation-tree name="app" default="yes">
        <page-type name="container">
            <body type="container"/>
        </page-type>

        <page-type name="top-level" type="container" class="app.AppPage">
            <allow-view-source>yes</allow-view-source>
        </page-type>

        <page type="top-level" name="home" default="yes" caption="Home">
            <summary>Introduction to the NEFS Sampler</summary>
            <body source="home.ftl"/>
        </page>
        <page type="top-level" name="forms-input" caption="Forms Input">
            <summary>
                This module contains samples that demonstrate how forms and input fields are created in Sparx.
                There are many examples that show how quick and easy it is to set up forms to accept input values
                and automatically validate them.
            </summary>

            <!-- This page is for demonstrating text fields in a form -->
            <page name="text-fields" caption="Text">
                <summary>
                    This page demonstrates how to create and use text fields. More explanation...
                </summary>
                <page name="line" caption="Line-oriented" command="dialog,form.input.text-fields"/>
                <page name="block" caption="Block-oriented" command="dialog,form.input.memo-and-html-fields"/>
            </page>
            <!-- This page is for demonstrating numeric fields in a form -->
            <page name="numeric-fields" caption="Numbers" command="dialog,form.input.numeric-fields">
                <summary>
                    This page demonstrates how to create and use numeric fields. More explanation...
                </summary>
            </page>
            <!-- This page is for demonstrating boolean fields in a form -->
            <page name="boolean-fields" caption="Boolean" command="dialog,form.input.boolean-fields">
                <summary>
                    This page demonstrates how to create and use boolean fields. More explanation...
                </summary>
            </page>

            <!-- This page is for demonstrating selection fields in a form -->
            <page name="select-fields" caption="Selection" command="dialog,form.input.select-fields">
                <summary>
                    This page demonstrates how to create and use select fields. More explanation...
                </summary>
            </page>
            <!-- This page is for demonstrating grid and composite fields in a form -->
            <page name="grid-fields" caption="Grids" command="dialog,form.input.grid-and-composite-fields">
                <summary>
                    This page demonstrates how to create and use grid and composite fields. More explanation...
                </summary>
            </page>
            <!-- This page is for demonstrating "conditional" fields in a form -->
            <page name="conditional-fields" caption="Conditionals" command="dialog,form.input.conditional-fields">
                <summary>
                    This page demonstrates how to create and use conditional fields. More explanation...
                </summary>
            </page>
            <!-- This page is for demonstrating popup fields in a form -->
            <page name="popup-fields" caption="Popups" command="dialog,form.input.popup-fields">
                <summary>
                    This page demonstrates how to create and use popup fields. More explanation...
                </summary>
            </page>
            <!-- This page is for demonstrating date fields in a form -->
            <page name="date-fields" caption="Date/Time" command="dialog,form.input.date-fields">
                <summary>
                    This page demonstrates how to create and use date/time fields. More explanation...
                </summary>
            </page>

            <page name="advance-input" caption="Advanced">
                <summary></summary>
                <page name="perspectives" caption="Perspectives">

                </page>

            </page>
        </page>

        <page type="top-level" name="forms-exec" caption="Forms Execution">
            <summary>
                This module contains samples that demonstrate how forms are executed in Sparx. While the Forms Input
                module described how to create forms and fields, this module deals with how to perform actions based
                on already validated input. Numerous examples delve into how to perform custom validation and execute
                dialog handlers based on existing Sparx functionality or creating your own through inheritance and
                delegation.
            </summary>

            <page name="director" caption="Director" command="dialog,form.exec.director-next-action"/>
            <page type="container" name="template" caption="Templates">
                <page name="body-xml" caption="Body in XML" heading="Get data, execute template body in project.xml" command="dialog,form.exec.template.body-xml"/>
                <page name="body-file" caption="Body in File" heading="Get data, execute template body in separate file" command="dialog,form.exec.template.body-file"/>
                <page name="inc-jsp" caption="Include JSP" heading="Get data, process using JSP include" command="dialog,form.exec.template.inc-jsp"/>
            </page>

            <page type="container" name="handler" caption="Handlers">
                <page name="inc-html" caption="Include URL" heading="Get URL, process using HTML include of an external page" command="dialog,form.exec.handler.inc-html"/>
                <page name="send-mail" caption="Send Mail" heading="Send an e-mail" command="dialog,form.exec.handler.send-mail"/>
                <page name="exec-cmd" caption="Exec Command" heading="Execute a Command" command="dialog,form.exec.handler.exec-cmd"/>
                <page name="exec-panels" caption="Exec Panels" heading="Execute Panels" command="dialog,form.exec.handler.exec-panels"/>

                <page name="transform-xslt-dc" caption="Transform Bean" command="dialog,form.exec.handler.transform-xslt-dc"/>
                <page name="transform-xslt-file" caption="Transform File" command="dialog,form.exec.handler.transform-xslt-file"/>

                <error-page name="transform-error" heading="Transformation Error">
                    <error exception-class="javax.xml.transform.TransformerConfigurationException"/>
                    <error exception-class="javax.xml.transform.TransformerException"/>
                    <body source="default-error-page.ftl"/>
                </error-page>
            </page>

            <page type="container" name="inheritance" caption="Inheritance">
                <page name="exec1a" caption="Exec 1 A" heading="Execute Sample 1 A" command="dialog,form.exec.inheritance.exec1a"/>
                <page name="exec1b" caption="Exec 1 B" heading="Execute Sample 1 B" command="dialog,form.exec.inheritance.exec1b"/>
                <page name="validate" caption="Validation" heading="Validation Sample" command="dialog,form.exec.inheritance.validate"/>
            </page>

            <page type="container" name="delegation" caption="Delegation">
                <page name="exec1a" caption="Exec 1 A" heading="Execute Sample 1 A" command="dialog,form.exec.delegation.exec1a"/>
                <page name="exec1b" caption="Exec 1 B" heading="Execute Sample 1 B" command="dialog,form.exec.delegation.exec1b"/>
                <page name="validate" caption="Validation" heading="Validation Sample" command="dialog,form.exec.delegation.validate"/>
            </page>
        </page>

        <!--
        This page is not used for anything except to demonstrate the usage of popup fields.
        -->
        <page name="test-popup" caption="Popup Test" popup="yes" heading="Test Popup" hidden="yes">
            <body>
                <![CDATA[
                <div class="textbox">
                Hello! This is the popup page related to the popup icon you just clicked.
                <a href="javascript:opener.activeDialogPopup.populateControls('Here it is!')">Click here </a>to populate
                the partner field of the popup icon with the text <i>Here it is!</i>.
                </div>
                ]]>
            </body>
        </page>

        <xdm:include file="play-page.xml"/>

        <page type="top-level" name="sitemap" caption="Sitemap">
            <body source="sitemap.ftl"/>
        </page>
        <page name="console" caption="Console" redirect="servlet-context-uri:/console"/>
        <page name="sample-apps-home" caption="Sample Apps Home" redirect="netspective-url:nefs-sample-apps-home"/>
    </navigation-tree>

</project>
