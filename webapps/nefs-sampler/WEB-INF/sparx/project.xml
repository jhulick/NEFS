<?xml version="1.0"?>

<project xmlns:xdm="http://www.netspective.org/Framework/Commons/XMLDataModel">

    <xdm:include resource="com/netspective/commons/conf/commons.xml"/>
    <xdm:include resource="com/netspective/axiom/conf/axiom.xml"/>
    <xdm:include resource="com/netspective/sparx/conf/sparx.xml"/>
    <xdm:include resource="com/netspective/sparx/conf/console.xml"/>

    <xdm:include file="forms-input.xml"/>
    <xdm:include file="forms-exec.xml"/>
    <xdm:include file="forms-acl.xml"/>

    <!--
       ======================================
       Application theme setting
       ======================================
    -->
    <default-theme>sampler</default-theme>

    <!-- a special template processor that will just show a table of contents for its children
         * we set xdm:replace-template-expressions to no so that ${xxx} variables aren't handled by XDM (since they
           are freemarker variables). -->
    <template-processor-type name="container" extends="freemarker" xdm:replace-template-expressions="no">
        <![CDATA[
        <#include "*/macros.ftl"/>
        <div class="textbox">
        ${vc.navigationContext.activePage.summary?default("No summary available for ${vc.navigationContext.activePage.qualifiedNameIncludingTreeId}. Please supply one using &lt;summary&gt; tag.")}
        <p>
        <@pageChildren/>
        </div>
        <@footer/>
        ]]>
    </template-processor-type>

    <!--
       ===================================================================
       This is the navigation tree structure defined for the application.
       ===================================================================
    -->
    <navigation-tree name="app" default="yes">
        <page-type name="container">
            <body type="container"/>
        </page-type>

        <page-type name="top-level" type="container" class="app.AppPage">
            <allow-view-source>yes</allow-view-source>
        </page-type>

        <page type="top-level" name="home" default="yes" caption="Home">
            <summary>Introduction to the NEFS Sampler</summary>
            <body source="home.ftl"/>
        </page>
        <page type="top-level" name="forms-input" caption="Forms Input">
            <summary>
                This page and its children pages contain samples that demonstrate how forms and input fields are created in Sparx.
                There are many examples that show how quick and easy it is to set up forms to accept input values
                and automatically validate them.
            </summary>

            <!-- This page is for demonstrating text fields in a form -->
            <page name="text-fields" caption="Text">
                <summary>
                    The Framework provides different styles of displaying text input fields. One is a simple one line
                    text input field while another is a multi-line text input field.
                </summary>
                <page name="line" caption="Line-oriented" command="dialog,form.input.text-fields">
                    <summary>
                         This page contains various sample one line text fields from generic text fields to specialized
                         fields such as email and 'masked' fields.
                    </summary>
                </page>
                <page name="block" caption="Block-oriented" command="dialog,form.input.memo-and-html-fields"/>
            </page>
            <!-- This page is for demonstrating numeric fields in a form -->
            <page name="numeric-fields" caption="Numbers" command="dialog,form.input.numeric-fields">
                <summary>
                    This page demonstrates the usage of various types of numeric fields that are available\: float, integer,
                    currency, phone, and zip code. Each type have their own validation rules and formatting patterns.
                </summary>
            </page>
            <!-- This page is for demonstrating boolean fields in a form -->
            <page name="boolean-fields" caption="Boolean" command="dialog,form.input.boolean-fields">
                <summary>
                    <![CDATA[
                    This page demonstrates usage of boolean fields which are fields that can only have a value
                    that is either true or false.  There are several display styles available for boolean fields\:
                    <i>radio</i>, <i>check-alone</i>, <i>popup</i>, and <i>combo</i>.
                    ]]>
                </summary>
            </page>

            <!-- This page is for demonstrating selection fields in a form -->
            <page name="select-fields" caption="Selection" command="dialog,form.input.select-fields">
                <summary>
                    <![CDATA[
                    This page demonstrates how to create and use fields that allow selection of values. There are several
                    styles available\: <i>list</i>, <i>multidual</i>, <i>multilist</i>, <i>combo</i>, <i>radio</i>, and
                    <i>multicheck</i>.
                    ]]>
                </summary>
            </page>

            <page name="select-fields-auto-submit" caption="Conditional Select" command="dialog,form.input.select-fields-auto-submit">
                <summary>
                    <![CDATA[
                    This page demonstrates how to create and use fields that allow selection of values and auto submit
                    forms that will do other data population from the server side (for conditional values).
                    ]]>
                </summary>
            </page>

            <!-- This page is for demonstrating grid and composite fields in a form -->
            <page name="grid-fields" caption="Grids" command="dialog,form.input.grid-and-composite-fields">
                <summary>
                    This page demonstrates how to create and use grid and composite fields. A composite field can be
                    described as a logical field that contains several children fields. Usually, a grid field will have
                    multiple composite fields which act as rows.
                </summary>
            </page>
            <!-- This page is for demonstrating "conditional" fields in a form -->
            <page name="conditional-fields" caption="Conditionals" command="dialog,form.input.conditional-fields">
                <summary>
                    This page demonstrates how flags and values can be applied to a dialog field based on conditionals
                    defined for that field.
                </summary>
            </page>
            <!-- This page is for demonstrating popup fields in a form -->
            <page name="popup-fields" caption="Popups" command="dialog,form.input.popup-fields">
                <summary>
                    <![CDATA[
                    This page demonstrates how to create and use popup fields. Popup fields are visually identifiable
                    by their special <i>magnifying glass</i> icon beside them.
                    ]]>
                </summary>
            </page>
            <!-- This page is for demonstrating date fields in a form -->
            <page name="date-fields" caption="Date/Time" command="dialog,form.input.date-fields">
                <summary>
                    <![CDATA[
                    This page demonstrates how to create and use date/time fields. There are several versions of
                    date/time fields that are available\: <i>time</i>, <i>date</i>, <i>date and time</i>, and <i>duration</i>.
                    ]]>
                </summary>
            </page>

            <page type="container" name="advance-input" caption="Advanced">
                <summary>This page and its children pages are for demonstrating more advanced usage of the
                built-in features of the dialog fields.
                </summary>
                <page name="client-side-scripts" caption="Client side scripts" command="dialog,form.input.client-side-scripts">
                    <summary>
                    This page demonstrates how to &quot;plug&quot; custom javascript calls to the client-side events
                    (e.g. click, value-changed, lose-focus, key-press, is-valid) of the dialog fields.
                    </summary>
                </page>
                <page name="perspectives" caption="Perspectives" command="dialog,form.input.data-perspective-conditionals">
                    <summary>This page demonstrates the usage of data perspectives for filling dialog fields.</summary>

                </page>
                <page name="hidden-fields" caption="Hidden Fields" command="dialog,form.input.hidden-fields">
                    <summary>This page demonstrates different usages of hidden fields in a dialog. Hidden fields are useful for keeping
                    track of information that you don't want the user to see. </summary>
                </page>
                <page name="command-fields" caption="Command Fields" command="dialog,form.input.command-fields">
                    <summary>
                        <![CDATA[
                        This page demonstrates the usage of a <i>List</i> command to populate a dialog field. Only certain commands
                        can be used for dialog fields. For information on Commands in general, please consult the User Manual.
                        ]]>
                    </summary>

                </page>

            </page>
        </page>

        <page type="top-level" name="forms-exec" caption="Forms Execution">
            <summary>
                This module contains samples that demonstrate how forms are executed in Sparx. While the Forms Input
                module described how to create forms and fields, this module deals with how to perform actions based
                on already validated input. Numerous examples delve into how to perform custom validation and execute
                dialog handlers based on existing Sparx functionality or creating your own through inheritance and
                delegation.
            </summary>

            <page name="director" caption="Director" command="dialog,form.exec.director-next-action">
                <summary>
                    <![CDATA[
                    This page demonstrates the usage of a <i>Dialog Director</i> which controls destinations after successful
                    form submission and the display of the dialog buttons.
                    ]]>
                </summary>
            </page>
            <page type="container" name="template" caption="Templates">
                <summary>
                    <![CDATA[
                    This page demonstrates the ability to <i>execute</i> templates or display JSP output after successful
                    submission of a dialog. Usually executing a template means displaying the output from a template
                    processing engine.
                    ]]>
                </summary>
                <page name="body-xml" caption="Body in XML" heading="Get data, execute template body in project.xml" command="dialog,form.exec.template.body-xml">
                    <summary>
                    <![CDATA[
                    This page contains an example of a dialog which will execute a template body defined in the dialog's
                    XML declaration and display the output.
                    ]]>
                    </summary>
                </page>
                <page name="body-file" caption="Body in File" heading="Get data, execute template body in separate file" command="dialog,form.exec.template.body-file">
                    <summary>
                    <![CDATA[
                    This page contains an example of a dialog which will execute a template body defined in a seperate file
                    and display the output.
                    ]]>
                    </summary>
                </page>
                <page name="inc-jsp" caption="Include JSP" heading="Get data, process using JSP include" command="dialog,form.exec.template.inc-jsp">
                   <summary>
                    <![CDATA[
                    This page contains an example of a dialog which will display an output from a JSP upon execution.
                    ]]>
                    </summary>
                </page>
            </page>

            <page type="container" name="handler" caption="Handlers">
                <summary>
                    <![CDATA[
                    This page demonstrates the usage of various <i>handlers</i> for the execution of a dialog. These handlers
                    are processed once the internal validation of the dialog is complete and the dialog is ready to be be executed.
                    Handlers are special built-in actions defined for convenience and reusability\: <i>url</i>, <i>mail</i>, <i>command</i>, <i>panels</i>,
                    and <i>style-sheet</i>. For defining more
                    complex actions and logic for execution, please take a look at the <b>inheritence</b> or <b>delegation</b> examples.
                    ]]>
                </summary>
                <page name="inc-html" caption="Include URL" heading="Get URL, process using HTML include of an external page" command="dialog,form.exec.handler.inc-html">
                    <summary>
                    <![CDATA[
                    This page contains an example of a dialog which has a handler that will display HTML from an external page.
                    ]]>
                    </summary>
                </page>
                <page name="send-mail" caption="Send Mail" heading="Send an e-mail" command="dialog,form.exec.handler.send-mail">
                    <summary>
                    <![CDATA[
                    This page contains an example of a dialog which has a handler that will send an email upon execution of the dialog.
                    ]]>
                    </summary>
                </page>
                <page name="exec-cmd" caption="Exec Command" heading="Execute a Command" command="dialog,form.exec.handler.exec-cmd">
                    <summary>
                    <![CDATA[
                    This page contains an example of a dialog which has a handler that will process a <i>command</i> upon execution of the dialog.
                    ]]>
                    </summary>
                </page>
                <page name="exec-panels" caption="Exec Panels" heading="Execute Panels" command="dialog,form.exec.handler.exec-panels">
                    <summary>
                    <![CDATA[
                    This page contains an example of a dialog which has a handler that will display <i>panels</i>
                    upon execution of the dialog. The panels can contain html from various entities such as JSPs or URLs.
                    ]]>
                    </summary>
                </page>

                <page name="transform-xslt-dc" caption="Transform Bean" command="dialog,form.exec.handler.transform-xslt-dc">
                    <summary>
                    <![CDATA[
                    This page contains an example of a dialog which has a handler that will display output
                    from a XSL style sheet transformation upon execution of the dialog.
                    ]]>
                    </summary>
                </page>
                <page name="transform-xslt-file" caption="Transform File" command="dialog,form.exec.handler.transform-xslt-file">
                    <summary>
                    <![CDATA[
                    This page contains an example of a dialog which has a handler that will display output
                    from a XSL style sheet transformation upon execution of the dialog.
                    ]]>
                    </summary>
                </page>

                <error-page name="transform-error" heading="Transformation Error">
                    <error exception-class="javax.xml.transform.TransformerConfigurationException"/>
                    <error exception-class="javax.xml.transform.TransformerException"/>
                    <body source="default-error-page.ftl"/>
                </error-page>
            </page>

            <page type="container" name="inheritance" caption="Inheritance">
                <summary>
                    <![CDATA[
                    This page demonstrates the <i>inheritance</i> model for defining custom logic or action for
                    different stages of a dialog. This model should only be used for the most complex cases where
                    you need to override the default behavior of the dialog. By extending the default dialog class,
                    <code>com.netspective.sparx.form.Dialog</code>, you have full control over the dialog
                    and its' behavior.
                    ]]>
                </summary>
                <page name="exec1a" caption="Exec 1 A" heading="Execute Sample 1 A" command="dialog,form.exec.inheritance.exec1a">
                    <summary>
                    <![CDATA[
                    This page contains a dialog which has a custom dialog class that overrides only the default execution
                    behavior of the dialog.
                    ]]>
                    </summary>
                </page>
                <page name="exec1b" caption="Exec 1 B" heading="Execute Sample 1 B" command="dialog,form.exec.inheritance.exec1b">
                    <summary>
                    <![CDATA[
                    This page contains a dialog which has a custom dialog class that overrides only the default execution
                    behavior of the dialog.
                    ]]>
                    </summary>
                </page>
                <page name="validate" caption="Validation" heading="Validation Sample" command="dialog,form.exec.inheritance.validate">
                    <summary>
                    <![CDATA[
                    This page contains a dialog which has a custom dialog class that overrides the default population, validation, and execution
                    behaviors of the dialog.
                    ]]>
                    </summary>
                </page>
            </page>

            <page type="container" name="delegation" caption="Delegation">
                <summary>
                    <![CDATA[
                    This page demonstrates the <i>delegation</i> model for defining custom logic or action for
                    different stages of a dialog. The Framework allows definition of various <i>listeners</i> for different
                    stages of a dialog. By implementing the listener interfaces and then assigning the custom listeners
                    to a dialog, these listeners will get executed.
                    ]]>
                </summary>
                <page name="exec1a" caption="Exec 1 A" heading="Execute Sample 1 A" command="dialog,form.exec.delegation.exec1a">
                    <summary>
                        <![CDATA[
                        This page demonstrates an <b>execution</b> listener for the <i>delegation</i> model. An execution listener
                        implements the <code>com.netspective.sparx.form.handler.DialogExecuteHandler</code> interface.
                        ]]>
                    </summary>
                </page>
                <page name="exec1b" caption="Exec 1 B" heading="Execute Sample 1 B" command="dialog,form.exec.delegation.exec1b">
                    <summary>
                         <![CDATA[
                        This page demonstrates an <b>execution</b> listener for the <i>delegation</i> model. An execution listener
                        implements the <code>com.netspective.sparx.form.handler.DialogExecuteHandler</code> interface.
                        ]]>
                    </summary>
                </page>
                <page name="validate" caption="Validation" heading="Validation Sample" command="dialog,form.exec.delegation.validate">
                    <summary>
                         <![CDATA[
                        This page contains a dialog that demonstrates <b>validation</b>, <b>population</b>, and <b>execution</b> listeners
                        for the <i>delegation</i> model. A listener class can implement various listener interfaces
                        to define custom business logic for various dialog stages.
                        ]]>
                    </summary>
                </page>
            </page>
        </page>

        <page name="acl" type="top-level" caption="Access Control">
            <summary>
                <![CDATA[
                This module is for demonstrating how the <i>Access Control</i> feature can be used. This feature
                is for setting up roles and capabilities to handle controlling access to various parts of an application.
                An application user can be assigned a role which will control whether or not the user can access a page,
                a report, a dialog, or even a field.
                ]]>
            </summary>
            <page name="change-role" caption="Change Role" command="dialog,form.acl.role">
                <summary>
                    <![CDATA[
                    This page is for changing a <i>Role</i> assigned to the user.
                    ]]>
                </summary>
            </page>
            <page name="test-acl1" caption="Test 1" heading="Test has-permissions">
                <summary>
                     <![CDATA[
                    This page is hidden in the navigation menu when the user has the following permission\: <code>/acl/app/forms/execution </code>
                    ]]>
                </summary>
                <body>
                <![CDATA[
                <div class="textbox">
                Hello! If you are able to view this page by using the navigation menu, then you DON'T have the <code>/acl/app/forms/execution </code>
                permission included in your role <code> ${vc.authenticatedUser.userRoleNamesAsString}</code>.
                </div>
                ]]>
                </body>
                <conditional action="apply-flags" hidden="yes" has-permissions="/acl/app/forms/execution"/>
            </page>
            <page name="test-acl2" caption="Test 2" heading="Test lack-permissions">
                <summary>
                    <![CDATA[
                    This page is hidden in the navigation menu when the user lacks the following permission\: <code>/acl/app/forms/execution</code>
                    ]]>
                </summary>
                <body>
                <![CDATA[
                <div class="textbox">
                Hello! If you are able to view this page by using the navigation menu, then you DO have the <code>/acl/app/forms/execution </code>
                permission included in your role.
                </div>
                ]]>
                </body>
                <conditional action="apply-flags" hidden="yes" lack-permissions="/acl/app/forms/execution"/>
            </page>
            <page name="test-acl3" caption="Test 3" heading="Test lack-permissions">
                <summary>
                    <![CDATA[
                    This page is hidden in the navigation menu when the user lacks the following permission\: <code>/acl/app/forms</code>
                    ]]>
                </summary>
                <body>
                <![CDATA[
                <div class="textbox">
                Hello! If you are able to view this page by using the navigation menu, then you DO have the <code>/acl/app/forms </code>
                permission included in your role.
                </div>
                ]]>
                </body>
                <conditional action="apply-flags" hidden="yes" lack-permissions="/acl/app/forms"/>
            </page>
        </page>

        <!--
        This page is not used for anything except to demonstrate the usage of popup fields.
        -->
        <page name="test-popup" caption="Popup Test" popup="yes" heading="Test Popup" hidden="yes">
            <body>
                <![CDATA[
                <div class="textbox">
                Hello! This is the popup page related to the popup icon you just clicked.
                <a href="javascript:opener.activeDialogPopup.populateControls('Here it is!')">Click here </a>to populate
                the partner field of the popup icon with the text <i>Here it is!</i>.
                </div>
                ]]>
            </body>
        </page>

        <xdm:include file="play-page.xml"/>

        <page type="top-level" name="profile" caption="Profile" hidden="yes">
            <body source="profile.ftl"/>
        </page>

        <page type="top-level" name="sitemap" caption="Sitemap">
            <body source="sitemap.ftl"/>
        </page>
        <page name="console" caption="Console" redirect="servlet-context-uri:/console"/>
        <page name="sample-apps-home" caption="Sample Apps Home" redirect="netspective-url:nefs-sample-apps-home"/>

        <page  name="test" hidden="yes" caption="TEST" include="jsp/test_sp.jsp"/>

        <error-page class="com.netspective.sparx.navigate.error.NavigationSqlErrorPage" start-sql-code="50" end-sql-code="150" heading="Got SQL range error">
            <body>Got a SQL Error in the 50 to 150 range. Please don't go any further.</body>
        </error-page>
    </navigation-tree>

    <!--
    **********************************************************************
    ** SAMPLE SECURITY DECLARATIONS                                     **
    **********************************************************************
    -->

    <!-- simulated login so that the sampler can use roles/permissions/auth-user -->
    <login-manager name="app" default="yes">
        <login-authenticator class="com.netspective.sparx.security.simulate.SimulatedLoginAuthenticator"/>
        <login-dialog class="com.netspective.sparx.security.simulate.SimulatedLoginDialog">
            <user-id>sampler</user-id>
            <password>letmein</password>
            <user-roles>/acl/role/restricted-user</user-roles>
        </login-dialog>
    </login-manager>

    <access-control-list name="acl">
        <permission name="app">
            <permission name="forms">
                <permission name="input">
                </permission>
                <permission name="execution">
                </permission>
            </permission>
            <permission name="console">
            </permission>
        </permission>

        <role name="role">
            <role name="super-user">
                <role name="role"/>
                <grant permission="/acl/app/forms"/>
                <grant permission="/acl/app/console"/>
            </role>
            <role name="restricted-user">
                <grant permission="/acl/app/forms"/>
                <revoke permission="/acl/app/forms/execution"/>
            </role>
        </role>
    </access-control-list>

    <!--
    **********************************************************************
    ** LOGIN DIALOG                                                     **
    **********************************************************************
    -->
    <login-manager name="app" default="yes">
        <login-authenticator class="com.netspective.sparx.security.simulate.SimulatedLoginAuthenticator">
            <authenticated-user-class>com.netspective.commons.security.BasicAuthenticatedUser</authenticated-user-class>
        </login-authenticator>
        <login-dialog class="com.netspective.sparx.security.simulate.SimulatedLoginDialog">
              <user-id>MyUserName</user-id>
              <password>MyPassword</password>
              <user-roles>/acl/role/super-user</user-roles>
              <!-- other settings can be provided too, see source code -->
        </login-dialog>
    </login-manager>

    <!-- This is a sample datasource declaration -->
    <!--connection-provider class="com.netspective.axiom.connection.JakartaCommonsDbcpConnectionProvider">
        <data-source name="jdbc/oracle">
            <driver-class>oracle.jdbc.driver.OracleDriver</driver-class>
            <url>vs-expr:jdbc:oracle:thin:@10.161.34.37:1521:TEST</url>
            <user>test</user>
            <password>test</password>
        </data-source>
    </connection-provider-->

    <!-- This is a sample stored procedure declaration -->
    <!--stored-procedures package="test">
        <stored-procedure name="sp" data-src="jdbc/oracle">
            <sql>{ ? = call pkg_test.testRefCursor(?) }</sql>
            <params>
                <param name="str2" type="out" sql-type="resultset"  value="session:rs"/>
                <param name="str1" type="in" sql-type="varchar"  value="request-attr:string1"/>
            </params>
        </stored-procedure>
    </stored-procedures-->
</project>
