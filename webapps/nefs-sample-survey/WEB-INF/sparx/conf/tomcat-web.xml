<?xml version="1.0"?>
<!DOCTYPE web-app
    PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
    "http://java.sun.com/dtd/web-app_2_3.dtd">

<!--
*****************************************************
** CAUCHO RESIN WEB-INF/web.xml CONFIGURATION FILE **
*****************************************************
$Id: tomcat-web.xml,v 1.1 2003-08-31 23:15:13 shahid.shah Exp $
-->

<web-app>

    <context-param>
	  <param-name>com.netspective.sparx.DEFAULT_DATA_SOURCE</param-name>
	  <param-value>jdbc/default</param-value>
    </context-param>

    <!--
    *******************************************************************************************************************
    ** SERVLET CONTEXT LISTENERS CONFIGURATION (initialize and cleanup resources required by Sparx)                  **
    *******************************************************************************************************************
    -->
    <listener>
        <listener-class>com.netspective.sparx.util.ApplicationEventsListener</listener-class>
    </listener>

    <!--
    *******************************************************************************************************************
    ** APPLICATION FRONT-CONTROLLER CONFIGURATION                                                                    **
    ** ============================================================================================================= **
    ** 1) The SparxNavigationController servlet handles all the requests to /app/*                                   **
    ** 2) In Tomcat you cannot define a FileServlet to handle specific subfolders.  Therefore, in Tomcat the         **
    **    the navigation is preceeded with "app".
    ** ============================================================================================================= **
    ** NOTE: In all of the other popular web servers, it is easy to setup a default servlet and add exceptions to    **
    **       to handle specific folders.  This makes for a much more elegant URL structure.
    *******************************************************************************************************************
    -->
    <servlet>
	<servlet-name>SparxNavigationController</servlet-name>
	<servlet-class>com.netspective.sparx.navigate.NavigationControllerServlet</servlet-class>
    </servlet>    

    <!--
    *******************************************************************************************************************
    ** NETSPECTIVE APPLICATION ADMINISTRATION CONSOLE CONFIGURATION                                                  **
    ** ============================================================================================================= **
    ** If you wish to disable the Console completely, just remove the <servlet> and <servlet-mapping> configuration  **
    ** elements for the NetspectiveConsole servlet.                                                                  **
    *******************************************************************************************************************
    -->
    <servlet>
	<servlet-name>NetspectiveConsole</servlet-name>
	<servlet-class>com.netspective.sparx.console.ConsoleServlet</servlet-class>
        <init-param>
            <param-name>com.netspective.sparx.navigate.CONTROLLER_SERVLET_OPTIONS</param-name>
            <param-value>--login-manager=console</param-value>
        </init-param>
        <init-param>
            <param-name>com.netspective.sparx.security.authenticator.SingleUserServletLoginAuthenticator.OPTIONS</param-name>
            <param-value>--user-id=console --encrypted-password=NCbHq1WqkpfDY</param-value> <!-- run "java com.netspective.commons.security.Crypt NC <password>" to generate encrypted password -->
        </init-param>
    </servlet>

    <servlet-mapping>
        <servlet-name>SparxNavigationController</servlet-name>
        <url-pattern>/app/*</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
	<servlet-name>NetspectiveConsole</servlet-name>
	<url-pattern>/console/*</url-pattern>
    </servlet-mapping>

    <!--
    *********************************************************************
    * Specify the default database connection - the default-data-source *
    * context-param's value is defined as a resource-ref in this        *
    * web.xml file (see below).                                         *
    *********************************************************************
    -->
	

    <resource-ref>
	<res-ref-name>jdbc/default</res-ref-name>
	<res-type>javax.sql.DataSource</res-type>
	<res-auth>Container</res-auth>
        <!-- In Tomcat you cannot define the entire resource definition inside web.xml
	     You have to define it in the server.xml.  Bellow is an example of what 
	     Needs to be entered within the specific Context that will use the resource.

	<init-param driver-name="org.hsqldb.jdbcDriver"/>
	<init-param url="jdbc:hsqldb:${app.docDir}/WEB-INF/database/instance/db"/>
	<init-param user="sa"/>
	<init-param password=""/>
	<init-param max-connections="20"/>
	<init-param enable-transaction="false"/>
	-->
    </resource-ref>
          
<!-- Tomcat example of JDBC resource definition in server.xml
<Resource name="jdbc/default"
	   auth="Container"
	   type="javax.sql.DataSource"/>
<ResourceParams name="jdbc/default">
	<parameter>
	  <name>url</name>
	  <value>jdbc:hsqldb:${app.docDir}/WEB-INF/database/instance/db</value>
	</parameter>
	<parameter>
	  <name>user</name>
	  <value>sa</value>
	</parameter>
	<parameter>
	 <name>password</name>
	 <value></value>
	</parameter>
	<parameter>
	  <name>max-connections</name>
	  <value>20</value>
	</parameter>
	<parameter>
	  <name>enable-transaction</name>
	  <value>false</value>
	</parameter>                
	<parameter>
	   <name>driver-name</name>
	   <value>org.hsqldb.jdbcDriver</value>
	</parameter>
</ResourceParams>
-->

</web-app>
