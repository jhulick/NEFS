<?xml version="1.0" encoding="UTF-8"?>
<section id="nef-app-dir-structure">
  <title>The NEF Application Directory Structure</title>

  <para>Every NEF application shares the benefit of a standard directory
  structure. To see the structure of the empty application (one with only the
  basic files required for all applications), view the
  <guimenu>Project</guimenu> | <guimenuitem>Project Folders</guimenuitem> tab
  of the Starter Application using the URL of the form
  http://<replaceable>host</replaceable>:<replaceable>port</replaceable>/<replaceable>appName</replaceable>/console
  The appName will be <literal>nefs-starter-empty</literal> in this
  case.</para>

  <figure>
    <title>NEF Standard Project Directory Structure</title>

    <mediaobject>
      <imageobject>
        <imagedata fileref="resources/images/screen-nef-folder-structure.gif" />
      </imageobject>
    </mediaobject>
  </figure>

  <para><variablelist>
      <varlistentry>
        <term>APP_ROOT</term>

        <listitem>
          <para>The root directory (in this case
          <literal><literal>nefs-starter-empty</literal></literal>) contains
          all the browser-accessible files for the application. This is
          commonly referred to as the <emphasis>Document Root</emphasis> for a
          website because it is the root directory visible to web browsers. It
          also contains a private directory, called
          <literal>WEB-INF</literal>, for the application to store NEF and
          Java servlet related files (it's called private because none of its
          contents will ever be served to end users). As already mentioned,
          all files in the application's root directory are accessible through
          a web browser. All subdirectories in the application root other than
          <literal>WEB-INF</literal> will also be directly accessible through
          a browser. Therefore, if you put an <filename>index.jsp</filename>
          file in this directory, you should be able to access it using a URL
          of the form
          http://<replaceable>host</replaceable>:<replaceable>port</replaceable>/<replaceable>appName</replaceable>/index.jsp.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>APP_ROOT/resources</term>

        <listitem>
          <para>If present this directory tree contains all of the
          application's shared files that need to be served to end users of
          your applications. Web browser resources that your application needs
          such as images and scripts are placed here and will be served to
          your end users by their browser.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>APP_ROOT/sparx</term>

        <listitem>
          <para>This directory tree contains all of the Sparx shared files
          that need to be served to end users of your applications. Web
          browser resources that Sparx needs such as style sheets, JavaScript
          sources, images, and Console files are placed here and will be
          served to your end users by their browser. You should not modify
          files in this directory because it does not contain any
          programmer-modifiable files.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>APP_ROOT/resources/sparx</term>

        <listitem>
          <para>This directory tree (which is not present in the starter
          application or the diagram above) contains optional Sparx shared
          files and resources that usually belong in
          <literal><replaceable>APP_ROOT</replaceable>/sparx</literal> but are
          being overridden by your application. For example, if you have your
          own stylesheets or images that need to replace something in Sparx,
          they would be placed in this directory. Because the
          <literal><replaceable>APP_ROOT</replaceable>/sparx</literal>
          directory contents should never be modified, the
          <replaceable>APP_ROOT</replaceable>/resources/sparx directory gives
          you the opportunity to override Sparx resources without worrying
          about files being overwritten when Sparx is upgrade.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>APP_ROOT/WEB-INF</term>

        <listitem>
          <para>The <literal>WEB-INF</literal> directory is required by the
          J2EE Servlet Specification. It contains all files private to the
          application, meaning none of the files in this directory will be
          accessible to an end-user's web-browser (except through the
          Netspective Console which optionally allows secure browsing of
          source files in <literal>WEB-INF</literal>). The
          <replaceable>APP_ROOT</replaceable>/WEB-INF/web.xml file configures
          your application for your J2EE Servlet container and you should
          refer to your application server's documentation for how to
          configure the contents of that file.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>WEB-INF/classes</term>

        <listitem>
          <para>This directory, which is a part of the J2EE Servlet
          Specification, holds all the custom Java source code written for the
          application. After the application is built, each Java source file
          in this directory contains a corresponding compiled version in the
          same location as the source. All Java classes in
          <literal>WEB-INF/classes</literal> are automatically included in the
          classpath of the application. Therefore, if you have declared a
          dialog (in the <filename>project.xml</filename> file) to have a
          custom Java handler for complete or partial dialog processing, the
          Java source and compiled versions should be located somewhere in
          this directory structure. Any auxiliary Java classes that you might
          need should also be placed here. By default, you should place all of
          your Java classes in the directory
          <literal>WEB-INF/classes/app</literal> (or another appropriate
          subdirectory) because certain application servers will not work with
          Java classes that are not in a package.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>WEB-INF/classes/auto</term>

        <listitem>
          <para>Although this directory is not found in the starter package,
          it is automatically created by NEF when it generates classes for use
          by your application. It is called auto because the classes in there
          are auto-generated and should not be modified.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>WEB-INF/lib</term>

        <listitem>
          <para>This directory, which is a part of the J2EE Servlet
          Specification, holds all the Java Archive (JAR) files needed by your
          application. These include not only JAR files needed for Sparx but
          also extra JAR files needed by your own Java classes.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>WEB-INF/sparx</term>

        <listitem>
          <para>Sparx uses the <literal>WEB-INF/sparx</literal> directory to
          store its project component descriptors. There is usually at least
          one <filename>project.xml</filename> file and may contain
          subdirectories if you wish to split up your application component
          declarations. The
          <emphasis><replaceable>APP_ROOT</replaceable>/WEB-INF/sparx/project.xml</emphasis>
          is the file that drives all of the Sparx functionality in your
          application.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>WEB-INF/sparx/conf</term>

        <listitem>
          <para>This directory contains contains sample
          <filename>web.xml</filename> configuration files for different
          application servers like WebLogic, WebSphere, Resin and Tomcat. It
          also contains Ant build files for compiling your application's
          classes.</para>
        </listitem>
      </varlistentry>
    </variablelist></para>
</section>