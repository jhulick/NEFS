<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" [
<!ENTITY __nef-assumptions__drd5ufsf SYSTEM "../nef-reusable-content/nef-assumptions.xml">
<!ENTITY __nef-starter-app-setup__dr4w0y2f SYSTEM "../nef-reusable-content/nef-starter-app-setup.xml">
<!ENTITY __nef-key-features__dv3ncu8x SYSTEM "../nef-reusable-content/nef-key-features.xml">
<!ENTITY __nef-project-file-tags-descr__drcg7alc SYSTEM "../nef-reusable-content/nef-project-file-tags-descr.xml">
]>
<article>
  <title>Books Application Tutorial</title>

  <section>
    <title>Objectives</title>

    <para>The Library Application is a project meant to get you familiar with
    more features of <acronym>NEF</acronym> by creating a complete library
    management application.</para>
  </section>

  &__nef-assumptions__drd5ufsf;

  &__nef-starter-app-setup__dr4w0y2f;

  <section>
    <title>Key Concepts</title>

    <para>This section outlines some of the important, global concepts that
    you should be familiar with before embarking on developing your own
    applications.</para>

    &__nef-key-features__dv3ncu8x;
  </section>

  <section>
    <title>Functionality</title>

    <para>The NEF Library Application is an application meant to be used for a
    library of books. It allows you to track the books within a library and
    maintain the loan records for these library books. Assets, borrowers and
    loan information can be added and edited using the various management
    interfaces provided by the Library Application.</para>
  </section>

  <section>
    <title>Design</title>

    <section>
      <title>Application Design</title>

      <para>The Library Application is designed around the basic Sparx
      components. It will use static SQL and associated reports to help you
      track the assets, borrowers and loan information. The library contains
      certain assets (books, journals, etc.) which the borrowers can loan for
      a specified period.</para>

      <para>The data storage of choice is the Java-based embedded database
      that is included in the Sparx Starter Application:
      <productname>HypersonicSQL</productname><footnote>
          <para>To learn more about <productname>HypersonicSQL, please go to
          <ulink
          url="http://hsqldb.sourceforge.net/">http://hsqldb.sourceforge.net/</ulink></productname></para>
        </footnote>. All the application components are included in the
      <filename>project.xml</filename> file for the Library
      Application.</para>
    </section>

    <section>
      <title>Database Design</title>

      <para>The Library Application stores the information about library
      assets, borrowers and loans. Each borrower can loan an asset belonging
      to the library. There are different types of assets belonging to the
      library (e.g. software, periodical). Each asset can be loaned either for
      a <emphasis>short term</emphasis> or <emphasis>long term. </emphasis>
      This is represented by the Loan Type. <figure>
          <title>Basic E-R Diagram for Library Application Database</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>The figure shows the entity-relationship diagram for the data we
      will be using. The database for the Library Application will be designed
      to store each entity (and its attributes) in a separate table. As with
      the application design, the database design will become clearer when it
      is implemented later in this tutorial.</para>
    </section>
  </section>

  <section>
    <title>Renaming the Starter Application</title>

    <para>You can now build your Books Application upon the Starter
    Application's directory structure. Rename the Starter Application's root
    folder (<filename class="directory">nefs-starter-empty</filename>) to your
    application's name. This tutorial uses <filename
    class="directory">nefs-sample-library</filename> as the root folder name
    for the Library Application.</para>
  </section>

  &__nef-project-file-tags-descr__drcg7alc;

  <section>
    <title>Creating the Data Layer</title>

    <para>With the empty (Starter) application successfully created and
    running, it is time to work on the backbone of the Library Application:
    the database.</para>

    <section>
      <title>Setting up the Data Source</title>

      <para>To set up the Library Application database, you need to have a
      database connection (data source) pointing towards your database. This
      is accomplished by using the <sgmltag>connection-provider</sgmltag> tag
      in the Project File (<filename>project.xml</filename>). <example>
          <title>Setting up the Data Source for Library Application</title>

          <programlisting>&lt;project xmlns:xdm="http://www.netspective.org/Framework/Commons/XMLDataModel"&gt;
...
&lt;<emphasis>connection-provider</emphasis> <emphasis>
                 class="com.netspective.axiom.connection.JakartaCommonsDbcpConnectionProvider"</emphasis>&gt; <co
              id="declare-conn-provider-tags-eg-1" />
 &lt;<emphasis>data-source</emphasis> name="<emphasis>jdbc/default</emphasis>"&gt; <co
              id="declare-conn-provider-tags-eg-2" />
  &lt;<emphasis>driver-class</emphasis>&gt;org.hsqldb.jdbcDriver&lt;/driver-class&gt; <co
              id="declare-conn-provider-tags-eg-3" />
  &lt;<emphasis>url</emphasis>&gt;
  vs-expr:jdbc:hsqldb:${servlet-context-path:/WEB-INF/database/instance/db} <co
              id="declare-conn-provider-tags-eg-4" />
  &lt;/url&gt; 
  &lt;<emphasis>user</emphasis>&gt;sa&lt;/user&gt; <co
              id="declare-conn-provider-tags-eg-5" />
  &lt;<emphasis>password</emphasis>&gt;&lt;/password&gt; <co
              id="declare-conn-provider-tags-eg-6" />
 &lt;/data-source&gt;
&lt;/connection-provider&gt;</programlisting>
        </example><calloutlist>
          <callout arearefs="declare-conn-provider-tags-eg-1">
            <para>A <sgmltag>connection-provider</sgmltag> tag is used to
            declare the connection to your application's database. <note>
                <para>Note that data sources specified under this connection
                provider will be managed by the Jakarta Commons DBCP. If you
                wish to use JNDI, you simply have to specify the resource
                according to the server you're using.</para>
              </note></para>
          </callout>

          <callout arearefs="declare-conn-provider-tags-eg-2">
            <para>Each <sgmltag>connection-provider</sgmltag> tag may contain
            one or more <sgmltag>data-source</sgmltag> tags. The
            <sgmltag>data-source</sgmltag> tag is used to specify the data
            source for the application. Any data source called
            '<emphasis>jdbc/default</emphasis>' is automatically used as the
            default JDBC data source. That is why the name of the data source
            in the above example code is set to "<literal>jdbc/default".
            </literal><note>
                <para>If you wish to change the name of the default data
                source, you may specify it in <filename>project.xml</filename>
                using the <sgmltag>default-data-source</sgmltag> tag.</para>
              </note></para>
          </callout>

          <callout arearefs="declare-conn-provider-tags-eg-3">
            <para>The <sgmltag>driver-class</sgmltag> tag is used to provide
            the driver to be used for the specified database. Since the
            Library Application uses HSQL database, our sample code specifies
            the appropriate JDBC driver.</para>
          </callout>

          <callout arearefs="declare-conn-provider-tags-eg-4">
            <para>The url is the JDBC URL used to connect to the database. The
            JDBC driver uses it to point to a specific database on a specific
            server. The URL has three parts which are separated by a colon
            "<literal>:</literal>". The first part is always
            "<literal>jdbc</literal>" and the second part is usually the name
            of the driver. In the example code, <literal>hsqldb</literal> is
            the name of the driver that is used to connect to your
            <productname>HypersonicSQL</productname> database. The third part
            is the name of the database.</para>

            <para>It is important to note the
            <sgmltag>servlet-context-path</sgmltag> value source. Value
            sources allow dynamic data to be included in XML without creating
            a programming language inside XML. In the example code, the
            <sgmltag>servlet-context-path</sgmltag> value source creates the
            database named '<literal>db</literal>' in <filename
            class="directory">WEB-INF</filename>/<filename
            class="directory">database</filename>/<filename
            class="directory">instance</filename> folder.</para>
          </callout>

          <callout arearefs="declare-conn-provider-tags-eg-5">
            <para>The <sgmltag>user</sgmltag> tag defines a default user to
            log in to the database. The example code specifies
            '<literal>sa</literal>' which is the default user for System
            Administrator.</para>
          </callout>

          <callout arearefs="declare-conn-provider-tags-eg-6">
            <para>The <sgmltag>password </sgmltag>tag is used to provide the
            password for the log in user. The default '<literal>sa</literal>'
            user has no password.</para>
          </callout>
        </calloutlist></para>

      <para>The above sample code declares a data source for the Library
      Application database.</para>

      <section>
        <title>Unit Testing the Data Source</title>

        <para>You may test the data source by using <guimenu>Data
        Management</guimenu> | <guisubmenu>Data Sources</guisubmenu> section
        in the Console of your Library Application.</para>

        <para><screenshot>
            <graphic fileref="./resources/images/screen-console-datasource.gif" />
          </screenshot></para>
      </section>
    </section>

    <section>
      <title>Creating the Schema</title>

      <para>After analyzing the information that needs to be stored in the
      database and judging from the E-R diagram shown earlier, you can derive
      the database schema that is necessary for the Library Application. This
      schema consists of the following five tables:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Asset_Type</emphasis>: used to store information
          about the different types of assets.</para>
        </listitem>

        <listitem>
          <para><emphasis>Asset</emphasis>: stores the information about
          different library assets.</para>
        </listitem>

        <listitem>
          <para><emphasis>Borrower</emphasis>: stores the information about
          the borrowers.</para>
        </listitem>

        <listitem>
          <para><emphasis>Loan_Type</emphasis>: stores the allowed loan
          types.</para>
        </listitem>

        <listitem>
          <para><emphasis>Asset_Loan</emphasis>: stores information about a
          loan.</para>
        </listitem>
      </itemizedlist>

      <para>The Asset_Type and Asset tables are 1:n related by the type (in
      Asset_Type) and type (in Asset) fields. The Asset and Asset_Loan tables
      are 1:n related by ID (in Asset) and asset_id (in Asset_Loan) fields.
      Similarly, Borrower and Asset_Loan tables are 1:n related by ID (in
      Borrower) and borrower_id (in Asset_Loan) fields. The Loan_Type and
      Asset_Loan tables are 1:n related by type (in Loan_Type) and loan_type
      (in Asset_Loan) fields.</para>

      <para>Once entered as XML, this schema is available for
      platform-independent database access from your application.</para>

      <para>Following is the code that creates the table types within Library
      Application schema:</para>

      <example>
        <title>Creating table types for Library Application</title>

        <programlisting>&lt;<emphasis>schema</emphasis> name="db"&gt; 
  &lt;<emphasis>xdm:include resource="com/netspective/axiom/conf/schema.xml"</emphasis>/&gt; 

   &lt;table-type name="Entity"&gt; <co id="declare-schema-tags-eg-1" />
    &lt;column name="${owner.name.toLowerCase()}_id" type="auto-inc" primary-key="yes" <co
            id="declare-schema-tags-eg-2" />
                                          descr="Unique identifier for ${owner.name}"&gt;
     &lt;presentation&gt; 
      &lt;field name="${column.name}" type="integer" caption="ID" primary-key-generated="yes"/&gt; <co
            id="declare-schema-tags-eg-3" />
     &lt;/presentation&gt;
    &lt;/column&gt;
   &lt;/table-type&gt;

   &lt;table-type name="Person" type="Entity"&gt; <co
            id="declare-schema-tags-eg-4" />
    &lt;column name="first_name" type="text" size="64" descr="The person's first name"/&gt; <co
            id="declare-schema-tags-eg-5" />
    &lt;column name="last_name" type="text" size="64" descr="The person's last name"/&gt;
   &lt;/table-type&gt;</programlisting>

        <calloutlist>
          <callout arearefs="declare-schema-tags-eg-1">
            <para>Defining a table type named
            <literal>Entity</literal>.</para>
          </callout>

          <callout arearefs="declare-schema-tags-eg-2">
            <para>The <sgmltag>column</sgmltag> element in the
            <sgmltag>table-type</sgmltag> elements creates actual columns
            derived from a particular <sgmltag>data-type</sgmltag>. The
            <sgmltag>column</sgmltag> elements will automatically maintain all
            type definitions and links to foreign keys. The name attribute
            represents the column name. Each column is usually named as a
            singular noun in all lower case with each word inside a name
            separated by underscores. Since this is a table template, the
            actual column name of the table that uses this table type will
            replace <emphasis>${owner.name.toLowerCase()}</emphasis> to form
            the actual column name.</para>

            <para>The <sgmltag>type</sgmltag> attribute represents the name of
            data-type to inherit. All of the attributes and elements from the
            other data-type will be inherited and any attributes and elements
            defined in this data-type will override those values. The
            <sgmltag>primary-key </sgmltag>attribute specifies whether or not
            this column is a primary key.</para>
          </callout>

          <callout arearefs="declare-schema-tags-eg-3">
            <para>Defining the presentation for the column. This defines how
            the column data will be displayed.</para>
          </callout>

          <callout arearefs="declare-schema-tags-eg-4">
            <para>Inheriting a new table type from the
            <literal>Entity</literal> table type defined in steps 1 through
            3.</para>
          </callout>

          <callout arearefs="declare-schema-tags-eg-5">
            <para>Specifying columns for the newly defined table type. The
            <literal>Person</literal> table type will consist of 3 columns -
            <literal>person_id</literal>, <literal>first_name</literal>,
            <literal>last_name</literal>.</para>
          </callout>
        </calloutlist>
      </example>

      <para>Following is the code that creates the tables within Library
      Application schema:</para>

      <example>
        <title>Creating tables for Library Application</title>

        <programlisting> &lt;table name="Asset_Type" abbrev="atype" type="Enumeration"&gt; <co
            id="declare-schema-tags-eg2-1" />
  &lt;enumerations&gt;
   &lt;enum&gt;Other&lt;/enum&gt;
   &lt;enum&gt;Software&lt;/enum&gt;
   &lt;enum&gt;Periodical&lt;/enum&gt;
   &lt;enum&gt;Book&lt;/enum&gt;
  &lt;/enumerations&gt;
 &lt;/table&gt;

 &lt;table name="Loan_Type" abbrev="ltype" type="Enumeration"&gt; <co
            id="declare-schema-tags-eg2-2" />
  &lt;enumerations&gt;
   &lt;enum&gt;Short term&lt;/enum&gt;
   &lt;enum&gt;Long term&lt;/enum&gt;
  &lt;/enumerations&gt;
 &lt;/table&gt;

 &lt;table name="Asset" abbrev="asset" type="Entity,Presentation"&gt; <co
            id="declare-schema-tags-eg2-3" />
  &lt;column name="type" lookup-ref="Asset_Type" required="yes" descr="The type of asset"/&gt; <co
            id="declare-schema-tags-eg2-4" />
  &lt;column name="name" type="text" size="64" required="yes" descr="Name of the asset"/&gt; 
  &lt;column name="quantity" type="integer" required="yes" 
                          descr="Count of number of assets available to loan"/&gt;
 &lt;/table&gt;
   
 &lt;table name="Borrower" type="Person,Presentation"&gt; <co
            id="declare-schema-tags-eg2-5" />
 &lt;/table&gt;

 &lt;table name="Asset_Loan" abbrev="asloan" type="Entity,Presentation"&gt;
  &lt;column name="asset_id" parent-ref="Asset.asset_id" <co
            id="declare-schema-tags-eg2-6" />
          descr="The asset that was borrowed (a loan is owned by the Asset so 
                 it's a parent reference)"&gt;
    &lt;presentation&gt;
      &lt;field name="${column.name}" type="select" caption="Asset" <co
            id="declare-schema-tags-eg2-7" />
             choices="query:library.asset-names-for-select-field-choices"/&gt;
    &lt;/presentation&gt;
  &lt;/column&gt;

  &lt;column name="borrower_id" lookup-ref="Borrower.borrower_id" descr="The person <co
            id="declare-schema-tags-eg2-8" />
                                                        that borrowed the asset"&gt;
    &lt;presentation&gt;
      &lt;field name="${column.name}" type="select" caption="Borrower" <co
            id="declare-schema-tags-eg2-9" />
             choices="query:library.borrower-names-for-select-field-choices"/&gt;
    &lt;/presentation&gt;
  &lt;/column&gt;
  &lt;column name="loan_type" lookup-ref="Loan_Type" descr="The type of loan"/&gt; <co
            id="declare-schema-tags-eg2-10" />
  &lt;column name="loan" type="duration" required="yes" descr="The duration of the loan"/&gt;
  &lt;column name="returned" type="boolean" descr="Whether the asset has been returned or not"/&gt;
 &lt;/table&gt;

&lt;/schema&gt;</programlisting>

        <calloutlist>
          <callout arearefs="declare-schema-tags-eg2-1">
            <para>Defining an enumeration containing available asset
            types.</para>
          </callout>

          <callout arearefs="declare-schema-tags-eg2-2">
            <para>Defining an enumeration containing available loan
            types.</para>
          </callout>

          <callout arearefs="declare-schema-tags-eg2-3">
            <para>Defining <literal>Asset</literal> table using the
            <literal>Entity</literal> table type defined previously.</para>
          </callout>

          <callout arearefs="declare-schema-tags-eg2-4">
            <para>Adding more columns to the <literal>Asset</literal> table.
            The <sgmltag>lookup-ref</sgmltag> attribute specifies a general
            foreign key relationship from this column which references the
            foreign field <literal>type</literal> in table
            <literal>Asset_Type</literal>. This creates a 1:N relationship
            between the <literal>Asset_Type</literal> and
            <literal>Asset</literal> tables.</para>
          </callout>

          <callout arearefs="declare-schema-tags-eg2-5">
            <para>Defining <literal>Borrower</literal> table using the
            <literal>Person</literal> table type defined previously. No
            columns are being added.</para>
          </callout>

          <callout arearefs="declare-schema-tags-eg2-6">
            <para>Defining the field which represents the asset to which the
            loan belongs. The <sgmltag>parent-ref</sgmltag> attribute
            specifies a parent/child foreign key relationship which indicates
            that <literal>Asset</literal> table is the parent of the
            <literal>asset_id</literal> column (creates a 1:N relationship
            between <literal>Asset</literal> table and the
            <literal>asset_id</literal> column).</para>
          </callout>

          <callout arearefs="declare-schema-tags-eg2-7">
            <para>Defines presentation for the <literal>asset_id</literal>
            field. The available assets will be displayed as a select option.
            The <sgmltag>choices</sgmltag> attribute is used to fill the
            select with available assets. This definition uses the query
            <literal>asset-names-for-select-field-choices</literal> to obtain
            the assets.</para>
          </callout>

          <callout arearefs="declare-schema-tags-eg2-8">
            <para>Defining the field which represents the borrower taking the
            loan. The <sgmltag>lookup-ref</sgmltag> attribute specifies a
            general foreign key relationship from this column which references
            the foreign field <literal>borrower_id</literal> in table
            <literal>Borrower</literal>. This creates a 1:N relationship
            between the <literal>Borrower</literal> and
            <literal>Asset_Loan</literal> tables.</para>
          </callout>

          <callout arearefs="declare-schema-tags-eg2-9">
            <para>Defines presentation for the <literal>borrower_id</literal>
            field. The available borrowers will be displayed as a select
            option. The <sgmltag>choices</sgmltag> attribute is used to fill
            the select with available borrowers. This definition uses the
            query <literal>borrower-names-for-select-field-choices</literal>
            to obtain the borrower names.</para>
          </callout>

          <callout arearefs="declare-schema-tags-eg2-10">
            <para>Defining the field which represents the loan type. The
            <sgmltag>lookup-ref</sgmltag> attribute specifies a general
            foreign key relationship from this column which references the
            foreign field <literal>type</literal>in table
            <literal>Loan_Type</literal>. This creates a 1:N relationship
            between the <literal>Loan_Type</literal> and
            <literal>Asset_Loan</literal> tables.</para>
          </callout>
        </calloutlist>
      </example>

      <section>
        <title>Unit Testing the Schema</title>

        <para>You may view the newly defined schema by using <guimenu>Data
        Management</guimenu> | <guisubmenu>Schemas</guisubmenu> section in the
        Console of your Library Application.</para>

        <para><screenshot>
            <graphic fileref="./resources/images/nefs-lib-schema.gif" />
          </screenshot></para>

        <para>There is a list of all the tables contained in the schema. It
        should list a total of 5 tables, of which the most important to you
        are the ones you explicitly created: <literal>Asset</literal>,
        <literal>Borrower</literal> and <literal>Asset_Loan</literal>. You can
        view the details for the schema tables from this section of the
        Console.</para>
      </section>
    </section>

    <section>
      <title>Generating Data Definition Language (DDL)</title>

      <para>The DDL representation of your schema consists of the actual
      commands that you need to issue to a database to create the tables you
      specified in the schema and to populate them with any static data (such
      as the one stored in enumeration tables) if necessary. These commands
      are DBMS-specific.</para>

      <section>
        <title>Using the Ant Build in Console</title>

        <para>To create the HSQL database and its DDL, you can use the
        <guimenu>Project</guimenu> |<guisubmenu> Ant Build</guisubmenu>
        section in the Console. In order to create the HSQL database, you must
        run the "<literal>create-database-hsqldb</literal>" target.</para>

        <note>
          <para>Please note that you need the initial-and-test-data.xml file
          in order to create the HSQL database using the Ant Build Script. See
          <xref linkend="desc-init-data" /></para>
        </note>

        <para><graphic
        fileref="./resources/images/screen-console-ant-build.gif" /></para>

        <para>This erases the existing default datasource (Hypersonic
        database), generates the SQL DDL for the default schema, loads the SQL
        DDL (effectively creating the Hypersonic SQL database) and finally
        loads the 'starter' from XML files using Sparx import from XML
        feature. The Console displays different messages during the HSQL
        database creation (as show below):</para>

        <para></para>

        <screenshot>
          <graphic fileref="./resources/images/screen-console-create-hsql-db.gif" />
        </screenshot>

        <note>
          <para>Please note that this target should be executed anytime the
          default schema is modified.</para>
        </note>

        <para>With this final step completed, you should be ready to add,
        update, delete and query data from the database using the Sparx
        Library. To do that, however, you need a user interface that will
        allow you to manipulate data as well as query what is stored in the
        database.</para>
      </section>

      <section id="desc-init-data">
        <title>Populating the HSQL Database with Test Data</title>

        <para>You will need some test data to be stored in the Library
        Application database. This will provide you with some initial data to
        test your application with. You can load this test data using the
        <filename class="directory">WEB-INF</filename>/<filename
        class="directory">database</filename>/<filename
        class="directory">data</filename>/<filename>initial-and-test-data.xml</filename>
        and <filename>initial-and-test-data.xsl</filename> files.</para>

        <important>
          <para>The <filename>initial-and-test-data.xml</filename> file is
          necessary to create the HSQL database.</para>
        </important>

        <example>
          <title>Loading Initial Test Data into Asset and Borrower
          Tables</title>

          <programlisting>&lt;?transform --xslt initial-and-test-data.xsl?&gt; <co
              id="load-test-data-1" />
&lt;<emphasis>!DOCTYPE dal SYSTEM "../defn/db-import.dtd"</emphasis>&gt; <co
              id="load-test-data-2" />

&lt;<emphasis>dal</emphasis>&gt; <co id="load-test-data-3" />
    &lt;generate-asset-records count="35"/&gt; <co id="load-test-data-4" />

    &lt;borrower last-name="Doe" first-name="John"/&gt; <co
              id="load-test-data-5" />
    &lt;borrower last-name="Doe" first-name="Jane"/&gt;
&lt;/dal&gt;</programlisting>

          <calloutlist>
            <callout arearefs="load-test-data-1">
              <para>The xdm-transform processing instruction tells Sparx to
              filter special tags through the XSLT before processing.</para>
            </callout>

            <callout arearefs="load-test-data-2">
              <para>The db-import.dtd is the DTD that is automatically created
              (by the Ant Build) based on the schema that is provided by the
              <sgmltag>schema</sgmltag> tag. The DTD is always called
              <replaceable>dbname</replaceable>-import.dtd, where
              <replaceable>dbname</replaceable> is the name specified in the
              <sgmltag>schema</sgmltag> tag.</para>
            </callout>

            <callout arearefs="load-test-data-3">
              <para>The root tag for the initial-and-test-data.xml is
              <sgmltag>dal. </sgmltag></para>
            </callout>

            <callout arearefs="load-test-data-4">
              <para>Setting the value for the number of asset records to be
              generated automatically by the XSL.</para>
            </callout>

            <callout arearefs="load-test-data-5">
              <para>Adding the test record in the <literal>Borrower</literal>
              table.</para>
            </callout>
          </calloutlist>
        </example>

        <para>You may optionally use XSL to automate the creation of a large
        number of test data.</para>

        <example>
          <title>Using XSL to Generate Test Data</title>

          <programlisting>&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"
     xmlns:dal="http://www.netspective.org/Framework/Axiom/DataAccessLayer"&gt; <co
              id="declare-test-db-xsl-eg-1" />

    &lt;xsl:output method="xml" indent="yes"/&gt; <co
              id="declare-test-db-xsl-eg-2" />

    &lt;xsl:template match="*"&gt; <co id="declare-test-db-xsl-eg-3" />
        &lt;xsl:copy&gt;
            &lt;xsl:copy-of select="attribute::*[. != '']"/&gt;
            &lt;xsl:apply-templates/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template match="generate-asset-records"&gt; <co
              id="declare-test-db-xsl-eg-4" />
        &lt;xsl:call-template name="iterate-one"&gt;
            &lt;xsl:with-param name="x"&gt;0&lt;/xsl:with-param&gt;
            &lt;xsl:with-param name="count"&gt;&lt;xsl:value-of select="@count"/&gt;&lt;/xsl:with-param&gt;
        &lt;/xsl:call-template&gt;
    &lt;/xsl:template&gt;
 
    &lt;xsl:template name="iterate-one"&gt; <co id="declare-test-db-xsl-eg-5" />
        &lt;xsl:param name="x"/&gt;
        &lt;xsl:param name="count"/&gt;

        &lt;asset&gt; <co id="declare-test-db-xsl-eg-6" />
            &lt;xsl:attribute name="name"&gt;Item &lt;xsl:value-of select="$x"/&gt;&lt;/xsl:attribute&gt;
            &lt;xsl:attribute name="type"&gt;Book&lt;/xsl:attribute&gt;
            &lt;xsl:attribute name="quantity"&gt;5&lt;/xsl:attribute&gt;
        &lt;/asset&gt;

        &lt;xsl:if test="$x &amp;lt; $count"&gt; <co
              id="declare-test-db-xsl-eg-7" />
          &lt;xsl:call-template name="iterate-one"&gt;
            &lt;xsl:with-param name="x" select="$x + 1"/&gt;
            &lt;xsl:with-param name="count"&gt;&lt;xsl:value-of select="$count"/&gt;&lt;/xsl:with-param&gt;
          &lt;/xsl:call-template&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</programlisting>

          <calloutlist>
            <callout arearefs="declare-test-db-xsl-eg-1">
              <para>Defining the Axiom Data Access Layer namespace prefix
              <sgmltag>dal</sgmltag>.</para>
            </callout>

            <callout arearefs="declare-test-db-xsl-eg-2">
              <para>Defines the output of the XSL (XML in this case).</para>
            </callout>

            <callout arearefs="declare-test-db-xsl-eg-3">
              <para>Defines the default template.</para>
            </callout>

            <callout arearefs="declare-test-db-xsl-eg-4">
              <para>The template that you will use in your XML file. This
              template receives, through the parameter
              <varname>count</varname>, the number of records to be added. It
              calls another custom template named "iterate-one". The value of
              <varname>count</varname> parameter is also sent to the called
              template.</para>
            </callout>

            <callout arearefs="declare-test-db-xsl-eg-5">
              <para>This is the iterate-one template which is called by the
              generate-asset-records template. It generates the values for all
              the fields of <literal>Asset</literal> table.</para>
            </callout>

            <callout arearefs="declare-test-db-xsl-eg-6">
              <para>The <literal>Asset</literal> XML records are generated
              using the value of parameter <varname>x</varname>, which changes
              on every iteration of the iterate-one template.</para>
            </callout>

            <callout arearefs="declare-test-db-xsl-eg-7">
              <para>This tag is responsible for recursively calling the
              iterate-one template. It checks the value of the parameter
              <varname>x</varname> and, if it is less than
              <varname>count</varname>, increases it by one to call the
              iterate-one template with this new value.</para>
            </callout>
          </calloutlist>
        </example>
      </section>

      <section>
        <title>Unit Testing the HSQL Database</title>

        <para>You may test the newly created HSQL database through
        <guimenu>Data Management</guimenu> | <guisubmenu>Data
        Sources</guisubmenu> | <guimenuitem>SQL Explorer</guimenuitem> option
        in the Console. Enter a SQL query for the Asset table in the SQL
        Editor.</para>

        <para></para>

        <screenshot>
          <graphic fileref="./resources/images/nefs-lib-test-schema.gif" />
        </screenshot>

        <para>To execute the test query, click the <command>OK
        </command>button. This displays the query result form (as shown
        below):</para>

        <para></para>

        <screenshot>
          <graphic fileref="./resources/images/nefs-lib-test-schema-result.gif" />
        </screenshot>
      </section>
    </section>

    <section>
      <title>Creating the Data Management Layer</title>

      <para>The Library Application uses the following queries for data
      management:</para>

      <section id="section-declare-static-qry">
        <title id="section-declare-qry">Declaring Queries</title>

        <para>The Library Application uses different queries to retrieve
        required information from the library database.</para>

        <example>
          <title>Static query to get all the library assets</title>

          <programlisting>&lt;<emphasis>queries</emphasis> package="library"&gt; <co
              id="declare-static-sql-tags-eg-1" />

 &lt;query name="get-all-assets"&gt; <co id="declare-static-sql-tags-eg-2" />

   select asset_id, name, Asset_Type.caption, quantity, <co
              id="declare-static-sql-tags-eg-3" />
          (select count(*) from Asset_Loan where Asset_Loan.asset_id = asset_id),
          (select count(*) from Asset_Loan where Asset_Loan.asset_id = asset_id 
                                                 and Asset_Loan.returned = 0)
   from Asset, Asset_Type
   where Asset.type = Asset_Type.id
   order by name;

   &lt;presentation&gt; <co id="declare-static-sql-tags-eg-4" />
     &lt;panel name="main" height="300"&gt;
       &lt;frame heading="static:All available assets"/&gt;
       &lt;report&gt;
         &lt;actions&gt; 
           &lt;action type="add" caption="Add Asset" redirect="page-id:/asset/add"/&gt; <co
              id="declare-static-sql-tags-eg-5" />
           &lt;action type="edit" redirect="page-id:/asset/edit?asset_id=${0}"/&gt; <co
              id="declare-static-sql-tags-eg-6" />
           &lt;action type="delete" redirect="page-id:/asset/delete?asset_id=${0}"/&gt;
         &lt;/actions&gt;
         &lt;column heading="ID" format="plain" redirect="page-id:/asset/edit?asset_id=${0}"/&gt; <co
              id="declare-static-sql-tags-eg-7" />
         &lt;column heading="Name" /&gt;
         &lt;column heading="Type"/&gt;
         &lt;column heading="Quantity" align="right"/&gt;
         &lt;column heading="Total Loans" align="right"/&gt;
         &lt;column heading="Currently Out" align="right"/&gt;
       &lt;/report&gt;
     &lt;/panel&gt;
   &lt;/presentation&gt;
 &lt;/query&gt;</programlisting>

          <calloutlist>
            <callout arearefs="declare-static-sql-tags-eg-1">
              <para>All the static queries in Axiom must belong to a statement
              package represented by <sgmltag>queries</sgmltag> XML tag. The
              statement package is identified by its name
              (<literal>library</literal> in the above example). You can
              define multiple packages within your application's project.xml
              file.</para>
            </callout>

            <callout arearefs="declare-static-sql-tags-eg-2">
              <para>The static query is defined (with or without bind
              parameters) by using the <sgmltag>query</sgmltag> tag. Each
              query is identified by its name
              (<literal>get-all-assets</literal> in the above example).</para>
            </callout>

            <callout arearefs="declare-static-sql-tags-eg-3">
              <para>The static SQL (with or without bind parameters) is
              declared under the query tag. The query in this example declares
              a join on the <literal>Asset</literal> and
              <literal>Asset_Type</literal> tables using the
              <literal>type</literal> (from <literal>Asset</literal>) and
              <literal>id</literal> (from <literal>Asset_Type</literal>)
              fields.</para>
            </callout>

            <callout arearefs="declare-static-sql-tags-eg-4">
              <para>Defining the presentation for displaying the query result.
              Each <sgmltag>query</sgmltag> tag contains a
              <sgmltag>presentation</sgmltag>tag associated with it. This tag
              defines presentation aspects of the query.</para>
            </callout>

            <callout arearefs="declare-static-sql-tags-eg-5">
              <para>You can declare a set of actions for your query's result.
              These actions provide a way to perform different functions on
              the displayed query result. Sparx has pre-defined action types
              for performing add, edit and delete operations on the selected
              record within your query result.</para>

              <para>The action tag is used to define individual actions
              (<literal>add</literal> in this case). The
              <sgmltag>action</sgmltag> tag may specify a <sgmltag
              class="attribute">redirect</sgmltag> attribute to automatically
              redirect to another page whenever it is chosen. The name of the
              redirect page is supplied using the <sgmltag>page-id</sgmltag>
              value source.</para>
            </callout>

            <callout arearefs="declare-static-sql-tags-eg-6">
              <para>Declaring <literal>edit</literal> action. You may also
              supply parameters and their values within the redirect URL
              (selected record's <literal>id</literal> field in this case).
              ${XXX} specifies a dynamic replacement. In the above example,
              <emphasis>${0}</emphasis> is used to indicate that it should be
              replaced with the value of the first column of current
              row.</para>
            </callout>

            <callout arearefs="declare-static-sql-tags-eg-7">
              <para>Every SQL report contains <sgmltag>column</sgmltag> tags
              that are used to customize the appearance of a particular column
              or, more accurately, a particular field. You may also specify a
              redirect page URL (<literal>edit</literal> page in this
              case).</para>
            </callout>
          </calloutlist>
        </example>

        <example>
          <title>Static query to get all the loans</title>

          <programlisting> &lt;query name="get-all-asset-loans"&gt; <co
              id="declare-sql-tags-eg2-1" />

   select asset_loan_id, Asset.name, last_name + ', ' + first_name, <co
              id="declare-sql-tags-eg2-2" />
          Loan_Type.caption, loan_begin_date, loan_end_date, returned
   from Asset, Asset_Loan, Loan_Type, Borrower
   where Asset.asset_id = Asset_Loan.asset_id and loan_type = Loan_Type.id and 
         Asset_Loan.borrower_id = Borrower.borrower_id
   order by loan_begin_date desc

   &lt;presentation&gt; <co id="declare-sql-tags-eg2-3" />
     &lt;panel name="main"&gt;
       &lt;frame heading="static:Loans for Asset"/&gt;
       &lt;report&gt;
         &lt;actions&gt;
           &lt;action type="edit" redirect="page-id:/loan/edit?asset_loan_id=${0}"/&gt; <co
              id="declare-sql-tags-eg2-4" />
           &lt;action type="delete" redirect="page-id:/loan/delete?asset_loan_id=${0}"/&gt; <co
              id="declare-sql-tags-eg2-5" />
         &lt;/actions&gt;
         &lt;column heading="ID" format="plain" <co
              id="declare-sql-tags-eg2-6" />
                              redirect="page-id:/loan/edit?asset_loan_id=${0}"/&gt;
         &lt;column heading="Asset"/&gt;
         &lt;column heading="Borrower"/&gt;
         &lt;column heading="Type"/&gt;
         &lt;column heading="Begin"/&gt;
         &lt;column heading="End"/&gt;
         &lt;column heading="Returned"/&gt;
       &lt;/report&gt;
     &lt;/panel&gt;
   &lt;/presentation&gt;
 &lt;/query&gt;</programlisting>

          <calloutlist>
            <callout arearefs="declare-sql-tags-eg2-1">
              <para>Defining query to retrieve 'all' the asset loans from the
              database.</para>
            </callout>

            <callout arearefs="declare-sql-tags-eg2-2">
              <para>The query declares a join on the <literal>Asset</literal>,
              <literal>Asset_Loan</literal>, <literal>Loan_Type</literal> and
              <literal>Borrower</literal> tables.</para>
            </callout>

            <callout arearefs="declare-sql-tags-eg2-3">
              <para>Defining the presentation for displaying the query
              result.</para>
            </callout>

            <callout arearefs="declare-sql-tags-eg2-4">
              <para>Defining <literal>edit</literal> action for the asset
              loan. The <sgmltag>action</sgmltag> tag specifies a <sgmltag
              class="attribute">redirect</sgmltag> attribute to automatically
              redirect to <literal>edit</literal> page.</para>
            </callout>

            <callout arearefs="declare-sql-tags-eg2-5">
              <para>Defining <literal>delete</literal> action for the asset
              loan. The <sgmltag>action</sgmltag> tag specifies a <sgmltag
              class="attribute">redirect</sgmltag> attribute to automatically
              redirect to <literal>delete</literal> page.</para>
            </callout>

            <callout arearefs="declare-sql-tags-eg2-6">
              <para>Every SQL report contains <sgmltag>column</sgmltag> tags
              that are used to customize the appearance of a particular column
              or, more accurately, a particular field. You may also specify a
              redirect page URL (<literal>edit</literal> page in this case).
              The <sgmltag>format</sgmltag> attribute specifies the format
              (<literal>plain</literal> in the above example) to be used to
              display the column data.</para>
            </callout>
          </calloutlist>
        </example>

        <example>
          <title>Static query to retrieve a specific loan</title>

          <programlisting> &lt;query name="get-asset-loans"&gt; <co
              id="declare-sql-tags-eg3-1" />

   select
     asset_loan_id, last_name + ', ' + first_name, Loan_Type.caption, 
     loan_begin_date, loan_end_date, returned
   from
     Asset_Loan, Loan_Type, Borrower
   where
     loan_type = Loan_Type.id and
     Asset_Loan.borrower_id = Borrower.borrower_id and
     Asset_Loan.asset_id = ? <co id="declare-sql-tags-eg3-2" />
   order
     by loan_begin_date desc

   &lt;params&gt;
     &lt;param value="request:asset_id"/&gt; <co id="declare-sql-tags-eg3-3" />
   &lt;/params&gt;

   &lt;presentation&gt;
     &lt;panel name="main"&gt;
       &lt;frame heading="static:Loans for Asset"/&gt;
       &lt;report&gt;
         &lt;actions&gt;
           &lt;action type="add" caption="Add Loan" 
               redirect="page-id:/loan/add?simple-expr:asset_id=${request:asset_id}"/&gt; <co
              id="declare-sql-tags-eg3-4" />
           &lt;action type="edit" redirect="page-id:/loan/edit?asset_loan_id=${0}"/&gt;
           &lt;action type="delete" redirect="page-id:/loan/delete?asset_loan_id=${0}"/&gt;
         &lt;/actions&gt;
         &lt;column heading="ID" format="plain" 
                              redirect="page-id:/loan/edit?asset_loan_id=${0}"/&gt;
         &lt;column heading="Borrower"/&gt;
         &lt;column heading="Type"/&gt;
         &lt;column heading="Begin"/&gt;
         &lt;column heading="End"/&gt;
         &lt;column heading="Returned"/&gt;
       &lt;/report&gt;
     &lt;/panel&gt;
   &lt;/presentation&gt;
 &lt;/query&gt;</programlisting>

          <calloutlist>
            <callout arearefs="declare-sql-tags-eg3-1">
              <para>Defining query to retrieve a specific loan from the
              database.</para>
            </callout>

            <callout arearefs="declare-sql-tags-eg3-2">
              <para>The ID for the specific asset to be retrieved will be
              replaced with the selected value dynamically.</para>
            </callout>

            <callout arearefs="declare-sql-tags-eg3-3">
              <para>Defining bound parameter for the query. This parameter
              represents the asset_id for the asset whose information is to be
              retrieved. The asset ID is retrieved from the request parameter
              named <varname>asset_id</varname>.</para>
            </callout>

            <callout arearefs="declare-sql-tags-eg3-4">
              <para>Defining <literal>add</literal> action for the asset loan.
              The <sgmltag>action</sgmltag> tag specifies a <sgmltag
              class="attribute">redirect</sgmltag> attribute to automatically
              redirect to <literal>add</literal> page. The asset ID is
              retrieved from request parameter named
              <varname>asset_id</varname>. This asset ID is in turn passed to
              the <literal>add</literal> page as the request parameter.</para>
            </callout>
          </calloutlist>
        </example>

        <example>
          <title>Static query to retrieve all loans of a borrower</title>

          <programlisting> &lt;query name="get-borrower-loans"&gt; <co
              id="declare-sql-tags-eg4-1" />

   select
     asset_loan_id, Asset.name, Loan_Type.caption, loan_begin_date, 
     loan_end_date, returned
   from
     Asset, Asset_Loan, Loan_Type
   where
     loan_type = Loan_Type.id and
     Asset_Loan.asset_id = Asset.asset_id and
     Asset_Loan.borrower_id = ? <co id="declare-sql-tags-eg4-2" />
   order by
     loan_begin_date desc

   &lt;params&gt;
     &lt;param value="request:borrower_id"/&gt; <co
              id="declare-sql-tags-eg4-3" />
   &lt;/params&gt;

   &lt;presentation&gt;
     &lt;panel name="main"&gt;
       &lt;frame heading="static:Loans for Borrower"/&gt;
       &lt;report&gt;
         &lt;actions&gt;
           &lt;action type="edit" redirect="page-id:/loan/edit?asset_loan_id=${0}"/&gt;
           &lt;action type="delete" redirect="page-id:/loan/delete?asset_loan_id=${0}"/&gt;
         &lt;/actions&gt;
         &lt;column heading="ID" format="plain" 
                              redirect="page-id:/loan/edit?asset_loan_id=${0}"/&gt;
         &lt;column heading="Asset"/&gt;
         &lt;column heading="Type"/&gt;
         &lt;column heading="Begin"/&gt;
         &lt;column heading="End"/&gt;
         &lt;column heading="Returned"/&gt;
       &lt;/report&gt;
     &lt;/panel&gt;
   &lt;/presentation&gt;
 &lt;/query&gt;</programlisting>

          <calloutlist>
            <callout arearefs="declare-sql-tags-eg4-1">
              <para>Defining query to retrieve all loans of a specific
              borrower.</para>
            </callout>

            <callout arearefs="declare-sql-tags-eg4-2">
              <para>The ID for the specific borrower whose loans are to be
              retrieved. The value will be replaced with the selected value
              dynamically.</para>
            </callout>

            <callout arearefs="declare-sql-tags-eg4-3">
              <para>Defining bound parameter for the query. This parameter
              represents the borrower_id for the borrower whose loan
              information is to be retrieved. The borrower ID is retrieved
              from the request parameter named
              <varname>borrower_id</varname>.</para>
            </callout>
          </calloutlist>
        </example>

        <example>
          <title>Static query to retrieve all the borrowers</title>

          <programlisting> &lt;query name="get-all-borrowers"&gt; <co
              id="declare-sql-tags-eg5-1" />

   select borrower_id, last_name, first_name,
         (select count(*) from Asset_Loan where Asset_Loan.borrower_id = borrower_id),
         (select count(*) from Asset_Loan where Asset_Loan.borrower_id = borrower_id 
          and Asset_Loan.returned = 0)
   from Borrower
   order by last_name, first_name

   &lt;presentation&gt;
     &lt;panel name="main"&gt;
       &lt;frame heading="static:All available borrowers"/&gt;
       &lt;report&gt;
         &lt;actions&gt;
           &lt;action type="add" caption="Add Borrower" redirect="page-id:/borrower/add"/&gt; 
           &lt;action type="edit" redirect="page-id:/borrower/edit?borrower_id=${0}"/&gt; <co
              id="declare-sql-tags-eg5-2" />
           &lt;action type="delete" redirect="page-id:/borrower/delete?borrower_id=${0}"/&gt;
         &lt;/actions&gt;
         &lt;column heading="ID" format="plain" 
                 redirect="page-id:/borrower/edit?borrower_id=${0}"/&gt; <co
              id="declare-sql-tags-eg5-3" />
         &lt;column heading="Last Name" /&gt;
         &lt;column heading="First Name"/&gt;
         &lt;column heading="Borrowed" align="right"/&gt;
         &lt;column heading="Unreturned" align="right"/&gt;
       &lt;/report&gt;
     &lt;/panel&gt;
   &lt;/presentation&gt;
 &lt;/query&gt;</programlisting>

          <calloutlist>
            <callout arearefs="declare-sql-tags-eg5-1">
              <para>Defining query to retrieve all the borrowers.</para>
            </callout>

            <callout arearefs="declare-sql-tags-eg5-2">
              <para>Defining <literal>edit</literal> action for the borrowers.
              The <sgmltag>action</sgmltag> tag specifies a <sgmltag
              class="attribute">redirect</sgmltag> attribute to automatically
              redirect to <literal>edit</literal> page.</para>
            </callout>

            <callout arearefs="declare-sql-tags-eg5-3">
              <para>Specifying the redirect page URL (<literal>edit</literal>
              page in this case). The selected borrower's ID is also passed to
              the redirected page.</para>
            </callout>
          </calloutlist>
        </example>

        <example>
          <title>Static queries to get all the assets and borrowers (to fill
          the select fields)</title>

          <programlisting> &lt;query name="asset-names-for-select-field-choices"&gt; <co
              id="declare-sql-tags-eg6-1" />
   select name, asset_id
   from Asset
 &lt;/query&gt;

 &lt;query name="borrower-names-for-select-field-choices"&gt; <co
              id="declare-sql-tags-eg6-2" />
   select (last_name + ', ' + first_name) as "Name", borrower_id
   from Borrower
 &lt;/query&gt;</programlisting>

          <calloutlist>
            <callout arearefs="declare-sql-tags-eg6-1">
              <para>Defining the query to retrieve all the assets. This
              information is used to fill the select fields displaying the
              Assets.</para>
            </callout>

            <callout arearefs="declare-sql-tags-eg6-2">
              <para>Defining the query to retrieve all the borrowers. This
              information is used to fill the select fields displaying the
              Borrowers.</para>
            </callout>
          </calloutlist>
        </example>
      </section>

      <section>
        <title>Unit Testing a Static SQL</title>

        <para>To test your newly defined static query, go to the <guimenu>Data
        Management</guimenu> | <guisubmenu>Static Queries</guisubmenu> section
        in the Console. This displays all the Static SQL statements defined in
        your <filename>project.xml</filename> file.</para>

        <para><screenshot>
            <graphic fileref="./resources/images/nefs-lib-queries.gif" />
          </screenshot></para>

        <para>Click on the
        <literal>asset-names-for-select-field-choices</literal> query to see
        the SQL statement.</para>

        <screenshot>
          <graphic fileref="./resources/images/nefs-lib-sql-qry-doc.gif" />
        </screenshot>

        <para>Click on the <guimenuitem>Unit Test</guimenuitem> option in the
        left menu bar. The unit test page is displayed containing a
        form/dialog for specifying the number of record rows to be displayed
        per page. By default, the number of records displayed per page is 10
        records per page. Enter the new value in this field if you want to
        change the number of records displayed per page. Click the
        <command>OK</command> button. The query is executed and its result is
        displayed (as shown below):</para>

        <para></para>

        <screenshot>
          <graphic fileref="./resources/images/nefs-lib-qry-result.gif" />
        </screenshot>
      </section>
    </section>
  </section>

  <section>
    <title>Creating the Presentation Layer</title>

    <para>The presentation layer of your Library Application comprises the
    following pages:</para>

    <itemizedlist>
      <listitem>
        <para>Home Page</para>
      </listitem>

      <listitem>
        <para>Assets Page</para>
      </listitem>

      <listitem>
        <para>Borrowers Page</para>
      </listitem>

      <listitem>
        <para>Loans Page</para>
      </listitem>

      <listitem>
        <para>Console Page</para>
      </listitem>

      <listitem>
        <para>NEFS Sample Apps Home Page</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Creating the Home Page</title>

      <para>Your Library Application Home page will display list of all the
      assets and the borrowers. These lists will be displayed in two separate
      panels. Both the lists will also have Add, Edit and Delete
      options.</para>

      <para>Sparx handles the pages that an end user sees and the transfer of
      control from one page to another using URIs and URLs. This is called
      <literal>navigation</literal>. Once declared using XML, Sparx can
      automatically manage the visual and operational end-user control of the
      navigation from one area of your application to another. You simply
      define the rules for what happens when a user visits a page and Sparx
      takes care of the rest.</para>

      <para>Following is the XML declaration for your Library Application
      navigation:</para>

      <example>
        <title>Creating "Home" Page</title>

        <programlisting>&lt;<emphasis>navigation-tree</emphasis> name="app" <emphasis>default="yes"</emphasis>&gt; <co
            id="nav-tags-eg1-1" />
  &lt;<emphasis>page</emphasis> name="home" <emphasis>default="yes"</emphasis> caption="Home"&gt; <co
            id="nav-tags-eg1-2" />
    &lt;panels style="horizontal"&gt; <co id="nav-tags-eg1-3" />
      &lt;panel type="command" <co id="nav-tags-eg1-4" />
             command="query,library.get-all-assets,-,-,-,record-manager-compressed"/&gt;
      &lt;panel type="command" <co id="nav-tags-eg1-5" />
             command="query,library.get-all-borrowers,-,-,-,record-manager-compressed"/&gt;
    &lt;/panels&gt;
  &lt;/page&gt;
&lt;/navigation-tree&gt;</programlisting>

        <calloutlist>
          <callout arearefs="nav-tags-eg1-1">
            <para>The <sgmltag>navigation-tree</sgmltag> tag starts out the
            definition of the navigation tree. Each tree has a
            <sgmltag>name</sgmltag> (<literal>app</literal> in this case). The
            <sgmltag>name</sgmltag> attribute is required and must be unique
            across all navigation trees. The <sgmltag>caption</sgmltag>
            attribute is a value source and is always required. A tree may be
            marked with <sgmltag class="attribute">default</sgmltag>=<sgmltag
            class="attvalue">yes</sgmltag> if it is to be the default tree.
            Which tree is actually used by the application may be specified as
            a server parameter or chosen dynamically at runtime based on some
            processing rules.</para>
          </callout>

          <callout arearefs="nav-tags-eg1-2">
            <para>The <sgmltag>page</sgmltag> tag begins a definition of a
            single page and appears under the
            <sgmltag>navigation-tree</sgmltag> tag. The
            <sgmltag>name</sgmltag> attribute is required and must be unique
            within the navigation tree in which it is defined. A page may be
            marked with <sgmltag class="attribute">default</sgmltag>=<sgmltag
            class="attvalue">yes</sgmltag> if it is to be the default page.
            Which page is actually used by the application may be specified as
            a servlet parameter or chosen dynamically at runtime based on some
            processing rules.</para>
          </callout>

          <callout arearefs="nav-tags-eg1-3">
            <para>The <sgmltag>panels</sgmltag> tag starts a definition of a
            page body and appears under the <sgmltag>page</sgmltag> tag. Its
            contents are handled by Sparx by laying out pre-defined panels
            similar to the way portals lay out their content. The
            <sgmltag>panels</sgmltag> tag ends up as an instance of the
            <classname>com.netspective.sparx.panel.HtmlLayoutPanel</classname>
            class. The <sgmltag>style</sgmltag> attribute specifies how the
            panels will be arranged. In the above example, the panels will be
            arranged horizontally.</para>
          </callout>

          <callout arearefs="nav-tags-eg1-4">
            <para>Declaring the panel containing the list of all assets. The
            value of <sgmltag>type</sgmltag> attribute is set to
            <literal>'command</literal>' which specifies that the panels will
            be displaying the result of a command's execution.</para>

            <para>The <sgmltag>command</sgmltag> attribute calls
            <methodname>execute</methodname>() on an instance of the
            <interfacename>com.netspective.sparx.command.Command</interfacename>
            interface and includes the content of the execution as the content
            of the page. The command attribute in this example executes the
            query <literal>get-all-asset</literal> from the query package
            named <literal>library</literal> (see <xref
            linkend="section-declare-qry" />). It also specifies one of the
            pre-defined report skins
            (<sgmltag>record-manager-compressed</sgmltag> in this case) for
            the displayed report.</para>
          </callout>

          <callout arearefs="nav-tags-eg1-5">
            <para>Declaring the panel containing the list of all borrowers.
            The value of <sgmltag>type</sgmltag> attribute is again set to
            <literal>'command</literal>'. The command attribute in this
            example executes the query <literal>get-all-borrowers</literal>
            from the query package named <literal>library</literal> (see <xref
            linkend="section-declare-qry" />). The
            <sgmltag>record-manager-compressed</sgmltag> skin is used for
            displaying the report.</para>
          </callout>
        </calloutlist>
      </example>
    </section>

    <section>
      <title>Creating the Assets Page</title>

      <para>The next step is to create a page for managing library assets. The
      Assets management page will contains links to pages for viewing, adding,
      editing and deleting the assets. Sparx allows creation of nested pages.
      i.e. pages that contain further pages. The following XML declaration
      creates the Assets management page:</para>

      <example>
        <title>Creating "Assets" Page</title>

        <programlisting>&lt;page name="asset" caption="Assets" <emphasis>dialog-next-action-url</emphasis>="page-id:/asset/view"&gt; <co
            id="nav-tags-eg2-1" />
  &lt;page name="view" caption="View Assets" <co id="nav-tags-eg2-2" />
        command="query,library.get-all-assets,-,-,-,record-manager-compressed"/&gt;
  &lt;page name="add" caption="Add Asset" command="dialog,schema.db.Asset,add"/&gt; <co
            id="nav-tags-eg2-3" />
  &lt;page name="edit" caption="Edit Asset" 
        require-request-param="asset_id" retain-params="asset_id"&gt; <co
            id="nav-tags-eg2-4" />
    &lt;missing-params-body&gt; <co id="nav-tags-eg2-5" />
      Please choose an asset to edit from the &amp;lt;a href='view'&amp;gt; assets 
      list&amp;lt;/a&amp;gt;.
    &lt;/missing-params-body&gt;
    &lt;panels style="horizontal"&gt; <co id="nav-tags-eg2-6" />
      &lt;panel type="command" command="dialog,schema.db.Asset,edit"/&gt; <co
            id="nav-tags-eg2-7" />
      &lt;panel type="command" <co id="nav-tags-eg2-8" />
        command="query,library.get-asset-loans,-,-,-,record-manager-compressed"/&gt;
    &lt;/panels&gt;
  &lt;/page&gt;
  &lt;page name="delete" caption="Delete Asset" command="dialog,schema.db.Asset,delete" <co
            id="nav-tags-eg2-9" />
        require-request-param="asset_id" retain-params="asset_id"&gt;
    &lt;missing-params-body&gt; <co id="nav-tags-eg2-10" />
      Please choose an asset to delete from the &amp;lt;a href='view'&amp;gt; assets 
      list&amp;lt;/a&amp;gt;.
    &lt;/missing-params-body&gt;
  &lt;/page&gt;
&lt;/page&gt;</programlisting>

        <calloutlist>
          <callout arearefs="nav-tags-eg2-1">
            <para>The <sgmltag>page</sgmltag> tag in the example code defines
            Library Application's <literal>Assets</literal> page. The name of
            the page is set to <literal>asset</literal> and the caption for
            the page is <literal>'Assets'</literal>. The
            <sgmltag>dialog-next-action-url</sgmltag> attribute sets the next
            action URL (to be used instead of a next action provider) for this
            particular page. This example sets the '<literal>View
            Assets</literal>' page as the page to be called after execution of
            an action on any page within this page tree.</para>
          </callout>

          <callout arearefs="nav-tags-eg2-2">
            <para>Declaring the '<literal>View Assets</literal>' page within
            the Assets page tree. The command attribute executes the query
            get-all-assets to display a list of all the assets of the
            library.</para>
          </callout>

          <callout arearefs="nav-tags-eg2-3">
            <para>Declaring the '<literal>Add Assets</literal>' page within
            the Assets page tree. The <sgmltag>command</sgmltag> attribute
            displays and executes a dialog box for Asset table using the
            "<sgmltag>add</sgmltag>" perspective.</para>
          </callout>

          <callout arearefs="nav-tags-eg2-4">
            <para>Declaring the <literal>Edit Asset</literal> page. The
            <sgmltag>require-request-parameter</sgmltag> attribute specifies
            <varname>asset_id</varname> as the required request parameter. The
            <varname>asset_id</varname> parameter contains unique identifier
            for the asset record that is being edited. The
            <sgmltag>retain-params</sgmltag> attribute specifies that the
            "asset_id" parameter's value will be sent to another page (tab)
            when that tab/page is clicked.</para>
          </callout>

          <callout arearefs="nav-tags-eg2-5">
            <para>The <sgmltag>missing-params-body</sgmltag> tag is used to
            optionally produce automatic error message when required request
            parameter <varname>('asset_id'</varname> in this case) is not
            provided.</para>
          </callout>

          <callout arearefs="nav-tags-eg2-6">
            <para>Declaring the panels for <literal>Edit Asset</literal> page.
            The panels will be arranged horizontally.</para>
          </callout>

          <callout arearefs="nav-tags-eg2-7">
            <para>The panels is used to display and execute a dialog box for
            <literal>Asset</literal> table using the "<sgmltag>edit</sgmltag>"
            perspective.</para>
          </callout>

          <callout arearefs="nav-tags-eg2-8">
            <para>Declaring the panel containing the list of all loans
            associated with the selected asset. The value of
            <sgmltag>type</sgmltag> attribute is again set to
            <literal>'command</literal>'. The command attribute in this
            example executes the query <literal>get-asset-loans</literal>. The
            <sgmltag>record-manager-compressed</sgmltag> skin is used for
            displaying the report.</para>
          </callout>

          <callout arearefs="nav-tags-eg2-9">
            <para>Declaring the <literal>Delete Asset</literal> page. The
            <sgmltag>require-request-parameter</sgmltag> attribute specifies
            <varname>asset_id</varname> as the required request parameter. The
            <varname>asset_id</varname> parameter contains unique identifier
            for the asset record that is being edited. The
            <sgmltag>retain-params</sgmltag> attribute specifies that the
            "asset_id" parameter's value will be sent to another page (tab)
            when that tab/page is clicked. The <sgmltag>command</sgmltag>
            attribute displays and executes a dialog box for Asset table using
            the "<sgmltag>delete</sgmltag>" perspective.</para>
          </callout>

          <callout arearefs="nav-tags-eg2-10">
            <para>The <sgmltag>missing-params-body</sgmltag> tag is used to
            optionally produce automatic error message when required request
            parameter <varname>('asset_id'</varname> in this case) is not
            provided.</para>
          </callout>
        </calloutlist>
      </example>
    </section>

    <section>
      <title>Creating the Borrowers Page</title>

      <para>The next step is to create a page for managing the borrowers. The
      Borrowers management page will contains links to pages for viewing,
      adding, editing and deleting the borrowers. The following XML
      declaration creates the Borrowers management page:</para>

      <example>
        <title>Creating "Borrowers" Page</title>

        <programlisting>&lt;page name="borrower" caption="Borrowers" <emphasis>dialog-next-action-url</emphasis>="page-id:/borrower/view"&gt; <co
            id="nav-tags-eg3-1" />
  &lt;page name="view" caption="View Borrowers" <co id="nav-tags-eg3-2" />
        command="query,library.get-all-borrowers,-,-,-,record-manager-compressed"/
  &lt;page name="add" caption="Add Borrower" command="dialog,schema.db.borrower,add"/&gt; <co
            id="nav-tags-eg3-3" />
  &lt;page name="edit" caption="Edit Borrower" command="dialog,schema.db.borrower,edit" <co
            id="nav-tags-eg3-4" />
        require-request-param="borrower_id" retain-params="borrower_id"&gt;
    &lt;missing-params-body&gt; <co id="nav-tags-eg3-5" />
      Please choose a borrower to edit from the &amp;lt;a href='view'&amp;gt; borrowers 
      list&amp;lt;/a&amp;gt;.
    &lt;/missing-params-body&gt;
    &lt;panels style="horizontal"&gt; <co id="nav-tags-eg3-6" />
      &lt;panel type="command" command="dialog,schema.db.Borrower,edit"/&gt; <co
            id="nav-tags-eg3-7" />
      &lt;panel type="command" 
          command="query,library.get-borrower-loans,-,-,-,record-manager-compressed"/&gt; <co
            id="nav-tags-eg3-8" />
    &lt;/panels&gt;
  &lt;/page&gt;
  &lt;page name="delete" caption="Delete Borrower" command="dialog,schema.db.borrower,delete" 
        require-request-param="borrower_id" retain-params="borrower_id"&gt; <co
            id="nav-tags-eg3-9" />
    &lt;missing-params-body&gt; <co id="nav-tags-eg3-10" />
      Please choose a borrower to delete from the &amp;lt;a href='view'&amp;gt; borrowers
      list&amp;lt;/a&amp;gt;.
    &lt;/missing-params-body&gt;
  &lt;/page&gt;
&lt;/page&gt;</programlisting>

        <calloutlist>
          <callout arearefs="nav-tags-eg3-1">
            <para>The <sgmltag>page</sgmltag> tag defines Library
            Application's <literal>Borrowers</literal> page. The name of the
            page is set to <literal>borrower</literal> and the caption for the
            page is <literal>'Borrowers'</literal>. The
            <sgmltag>dialog-next-action-url</sgmltag> attribute sets the
            '<literal><literal>View </literal>Borrowers</literal>' page as the
            page to be called after execution of an action on any page within
            this page tree.</para>
          </callout>

          <callout arearefs="nav-tags-eg3-2">
            <para>Declaring the '<literal>View Borrowers</literal>' page
            within the <literal>Borrowers</literal> page tree. The command
            attribute executes the query <literal>get-all-borrowers</literal>
            to display a list of all the borrowers.</para>
          </callout>

          <callout arearefs="nav-tags-eg3-3">
            <para>Declaring the '<literal>Add Borrowers</literal>' page within
            the Borrowers page tree. The <sgmltag>command</sgmltag> attribute
            displays and executes a dialog box for Borrower table using the
            "<sgmltag>add</sgmltag>" perspective.</para>
          </callout>

          <callout arearefs="nav-tags-eg3-4">
            <para>Declaring the <literal>Edit Borrower</literal> page. The
            <sgmltag>require-request-parameter</sgmltag> attribute specifies
            <varname>borrower_id</varname> as the required request parameter.
            The <varname>borrower_id</varname> parameter contains unique
            identifier for the borrower record that is being edited. The
            <sgmltag>retain-params</sgmltag> attribute specifies that the
            "borrower_id" parameter's value will be sent to another page (tab)
            when that tab/page is clicked.</para>
          </callout>

          <callout arearefs="nav-tags-eg3-5">
            <para>The <sgmltag>missing-params-body</sgmltag> tag is used to
            optionally produce automatic error message when required request
            parameter <varname>('borrower_id'</varname> in this case) is not
            provided.</para>
          </callout>

          <callout arearefs="nav-tags-eg3-6">
            <para>Declaring the panels for <literal>Edit Borrower</literal>
            page. The panels will be arranged horizontally.</para>
          </callout>

          <callout arearefs="nav-tags-eg3-7">
            <para>The panels is used to display and execute a dialog box for
            Borrower table using the "<sgmltag>edit</sgmltag>"
            perspective.</para>
          </callout>

          <callout arearefs="nav-tags-eg3-8">
            <para>Declaring the panel containing the list of all loans taken
            by the selected borrower. The command attribute in this example
            executes the query <literal>get-borrower-loans</literal>. The
            <sgmltag>record-manager-compressed</sgmltag> skin is used for
            displaying the report.</para>
          </callout>

          <callout arearefs="nav-tags-eg3-9">
            <para>Declaring the <literal>Delete Borrower</literal> page. The
            <sgmltag>require-request-parameter</sgmltag> attribute specifies
            <varname>borrower_id</varname> as the required request parameter.
            The <varname>borrower_id</varname> parameter contains unique
            identifier for the borrower record that is being edited. The
            <sgmltag>retain-params</sgmltag> attribute specifies that the
            "borrower_id" parameter's value will be sent to another page (tab)
            when that tab/page is clicked. The <sgmltag>command</sgmltag>
            attribute displays and executes a dialog box for Borrower table
            using the "<sgmltag>delete</sgmltag>" perspective.</para>
          </callout>

          <callout arearefs="nav-tags-eg3-10">
            <para>The <sgmltag>missing-params-body</sgmltag> tag is used to
            optionally produce automatic error message when required request
            parameter <varname>('borrower_id'</varname> in this case) is not
            provided.</para>
          </callout>
        </calloutlist>
      </example>
    </section>

    <section>
      <title>Creating the Loans Page</title>

      <para>The next step is to create a page for managing the loans. The
      Loans management page will contains links to pages for viewing, adding,
      editing and deleting the loans. The following XML declaration creates
      the Loans management page:</para>

      <example>
        <title>Creating "Loans" Page</title>

        <programlisting>&lt;page name="loan" caption="Loans" <emphasis>dialog-next-action-url</emphasis>="page-id:/loan/view"&gt; <co
            id="nav-tags-eg4-1" />
  &lt;page name="view" caption="View Loans" <co id="nav-tags-eg4-2" />
        command="query,library.get-all-asset-loans,-,-,-,record-manager-compressed"/&gt;
  &lt;page name="add" caption="Add Loan" command="dialog,schema.db.Asset_Loan,add"/&gt; <co
            id="nav-tags-eg4-3" />
  &lt;page name="edit" caption="Edit Loan" command="dialog,schema.db.Asset_Loan,edit" <co
            id="nav-tags-eg4-4" />
        require-request-param="asset_loan_id" retain-params="asset_loan_id"&gt;
    &lt;missing-params-body&gt; <co id="nav-tags-eg4-5" />
      Please choose an asset and select a loan from the &amp;lt;a 
      href='../asset/view'&amp;gt;asset list&amp;lt;/a&amp;gt;.
    &lt;/missing-params-body&gt;
  &lt;/page&gt;
  &lt;page name="delete" caption="Delete loan" command="dialog,schema.db.Asset_Loan,delete" <co
            id="nav-tags-eg4-6" />
        require-request-param="asset_loan_id" retain-params="asset_loan_id"&gt;
    &lt;missing-params-body&gt; <co id="nav-tags-eg4-7" />
      Please choose an asset and select a loan from the 
      &amp;lt;a href='../asset/view'&amp;gt;asset list&amp;lt;/a&amp;gt;.
    &lt;/missing-params-body&gt;
  &lt;/page&gt;
&lt;/page&gt;</programlisting>

        <calloutlist>
          <callout arearefs="nav-tags-eg4-1">
            <para>The <sgmltag>page</sgmltag> tag defines Library
            Application's <literal>Loans</literal> page. The name of the page
            is set to <literal>loan</literal> and the caption for the page is
            <literal>'Loans'</literal>. The
            <sgmltag>dialog-next-action-url</sgmltag> attribute sets the
            '<literal><literal>View </literal>Loans</literal>' page as the
            page to be called after execution of an action on any page within
            this page tree.</para>
          </callout>

          <callout arearefs="nav-tags-eg4-2">
            <para>Declaring the '<literal>View Loans</literal>' page within
            the <literal>Loans</literal> page tree. The command attribute
            executes the query <literal>get-all-asset-loans</literal> to
            display a list of all the loans.</para>
          </callout>

          <callout arearefs="nav-tags-eg4-3">
            <para>Declaring the '<literal>Add Loans</literal>' page within the
            Loans page tree. The <sgmltag>command</sgmltag> attribute displays
            and executes a dialog box for Asset_Loan table using the
            "<sgmltag>add</sgmltag>" perspective.</para>
          </callout>

          <callout arearefs="nav-tags-eg4-4">
            <para>Declaring the <literal>Edit Loan</literal> page. The
            <sgmltag>require-request-parameter</sgmltag> attribute specifies
            <varname>asset_loan_id</varname> as the required request
            parameter. The <varname>asset_loan_id</varname> parameter contains
            unique identifier for the asset loan record that is being edited.
            The <sgmltag>retain-params</sgmltag> attribute specifies that the
            "<varname>asset_loan_id</varname>" parameter's value will be sent
            to another page (tab) when that tab/page is clicked.</para>
          </callout>

          <callout arearefs="nav-tags-eg4-5">
            <para>The <sgmltag>missing-params-body</sgmltag> tag is used to
            optionally produce automatic error message when required request
            parameter <varname>(</varname>'<varname>asset_loan_id</varname>'
            in this case) is not provided.</para>
          </callout>

          <callout arearefs="nav-tags-eg4-6">
            <para>Declaring the <literal>Delete Loan</literal> page. The
            <sgmltag>require-request-parameter</sgmltag> attribute specifies
            <varname>asset_loan_id</varname> as the required request
            parameter. The <varname>asset_loan_id</varname> parameter contains
            unique identifier for the asset loan record that is being edited.
            The <sgmltag>retain-params</sgmltag> attribute specifies that the
            "<varname>asset_loan_id</varname>" parameter's value will be sent
            to another page (tab) when that tab/page is clicked. The
            <sgmltag>command</sgmltag> attribute displays and executes a
            dialog box for Asset_Loan table using the
            "<sgmltag>delete</sgmltag>" perspective.</para>
          </callout>

          <callout arearefs="nav-tags-eg4-7">
            <para>The <sgmltag>missing-params-body</sgmltag> tag is used to
            optionally produce automatic error message when required request
            parameter <varname>('asset_loan_id'</varname> in this case) is not
            provided.</para>
          </callout>
        </calloutlist>
      </example>
    </section>

    <section>
      <title>Creating the Console Page</title>

      <para>Like every other Sparx application, your Library Application also
      has an associated Console. You may provide the access to this Console
      using the following XML declaration:</para>

      <example>
        <title>Linking to the Library Application Console</title>

        <programlisting>&lt;navigation-tree name="app" default="yes"&gt;  
 &lt;page name="console" caption="Console" redirect="servlet-context-uri:/console"/&gt; <co
            id="declare-console-eg-1" />
&lt;/navigation-tree&gt;</programlisting>

        <calloutlist>
          <callout arearefs="declare-console-eg-1">
            <para>The <sgmltag>page</sgmltag> tag declares <literal>Console
            </literal>page for the <literal>Library Application</literal>. The
            <sgmltag>redirect</sgmltag> attribute is set (using the
            <sgmltag>servlet-context-uri</sgmltag> value source) to
            automatically redirect to the application Console.</para>
          </callout>
        </calloutlist>
      </example>
    </section>

    <section>
      <title>Creating the Sample Apps Home Page</title>

      <para>As a last step to the creation of your Library Application, you
      will add a Sample Apps Home page using the following XML
      declaration:</para>

      <example>
        <title>Creating Sample Apps Home Page for Library Application</title>

        <programlisting>&lt;navigation-tree name="app" default="yes"&gt;  
   &lt;page name="sample-apps-home" caption="Sample Apps Home" <co
            id="declare-nefs-sample-apps-eg-1" />
                                 redirect="<emphasis>netspective-url:nefs-sample-apps-home</emphasis>"/&gt; 
&lt;/navigation-tree&gt;</programlisting>

        <calloutlist>
          <callout arearefs="declare-nefs-sample-apps-eg-1">
            <para>The <sgmltag>page</sgmltag> tag declares the <literal>Sample
            Apps Home </literal>page. The <sgmltag>redirect</sgmltag>
            attribute specifies the URL of the Netspective <literal>Sample
            Apps</literal> page using the <sgmltag>netspective-url</sgmltag>
            value source.</para>
          </callout>
        </calloutlist>
      </example>
    </section>

    <section>
      <title>Testing the Library Application</title>

      <para>Congratulations! The Library Application is complete. Now you
      should open up your browser window and go to the Library Application’s
      main page using the URL:
      http://<replaceable>host</replaceable>:<replaceable>port</replaceable>/<replaceable>appName</replaceable>.
      Assuming you are using localhost and port <literal>8080</literal> for
      your Resin server and <literal>nefs-sample-library</literal> as your
      application's name, the URL for Library Application Home Page becomes:
      <ulink
      url="http://localhost:8080/nefs-sample-books">http://localhost:8080/nefs-sample-library</ulink></para>

      <para></para>

      <screenshot>
        <graphic fileref="./resources/images/nefs-lib-home-page.gif" />
      </screenshot>

      <para>The Home page lists all the assets available in your Library
      Application database along with the available borrowers. </para>

      <para>Explore the Assets tab which contains View Assets, Add Asset, Edit
      Asset and Delete Asset pages. Use the View Assets page to view a list of
      all the available assets.</para>

      <screenshot>
        <graphic fileref="./resources/images/nefs-lib-view-assets-page.gif" />
      </screenshot>

      <para>Use the Add Asset page to add an asset.</para>

      <para><screenshot>
          <graphic fileref="./resources/images/nefs-lib-add-asset.page.gif" />
        </screenshot></para>

      <para>Enter the book information and click the <command>OK</command>
      button. You can see the newly added book in the list available on the
      Home page.</para>

      <para></para>

      <screenshot>
        <graphic fileref="./resources/images/screen-books-app-new-list.gif" />
      </screenshot>

      <para>Try editing the record of the book. Select the book from the list
      by clicking on its name. The Edit Book page is displayed containing the
      selected book's information.</para>

      <para></para>

      <screenshot>
        <graphic fileref="./resources/images/screen-books-app-edit.gif" />
      </screenshot>

      <para>Go to Home page and select the asset to delete. The Delete Book
      page is displayed containing the selected book's information. Click on
      the Delete button to delete the selected book's record.</para>

      <para></para>

      <screenshot>
        <graphic fileref="./resources/images/screen-books-app-delete.gif" />
      </screenshot>

      <para>You may access the Library Application Console through the Console
      page. Use '<literal>console</literal>' and '<literal>console</literal>'
      (without quotes) for Console's <varname>User Id</varname> and
      <varname>Password</varname>.</para>

      <para></para>

      <screenshot>
        <graphic fileref="./resources/images/screen-books-app-console.gif" />
      </screenshot>

      <para>Try the Sample Apps Home page to see the NEFS Sample Apps Home
      Page loaded from the netspective web site.</para>

      <screenshot>
        <graphic fileref="./resources/images/screen-books-samples-page.gif" />
      </screenshot>
    </section>

    <section>
      <title>Conclusion</title>

      <para>Congratulations! Your Library application is now complete. This
      application is relatively more complex in its use of nested pages and
      multiple panels per page. You can now move on to more complex sample
      applictions provided by Netspective Enterprise Suite to help you learn
      more features provided by NEFS.</para>
    </section>
  </section>
</article>