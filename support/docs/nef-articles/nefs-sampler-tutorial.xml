<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" [
<!ENTITY __nef-assumptions__drd5vrj0 SYSTEM "../nef-reusable-content/nef-assumptions.xml">
<!ENTITY __nef-sampler-setup__drd8289e SYSTEM "../nef-reusable-content/nef-sampler-setup.xml">
<!ENTITY __sparx-nav-tree-overview__drq9ifdi SYSTEM "sparx-nav-tree-overview.xml">
]>
<article>
  <title>NEFS Sampler Tutorial</title>

  <section>
    <title>Objectives</title>

    <para>Welcome to the NEFS Sampler Tutorial (Tour)! This tutorial aims at
    giving you a tour of the NEFS Sampler. It facilitates your learning by
    reducing the learning time through quick familiarization with various
    Sampler sections. You don't have to worry about learning the use of
    Sampler. Instead, you can concentrate on the core concepts being
    highlighted by the Sampler sections.</para>

    <section>
      <title>Learning Objectives Checklist</title>

      <para>At the end of this tutorial, you should be able to
      understand:</para>

      <itemizedlist>
        <listitem>
          <para>the objectives of NEFS Sampler</para>
        </listitem>

        <listitem>
          <para>how to set up the NEFS Sampler at your application
          server</para>
        </listitem>

        <listitem>
          <para>how to view the XDM code within NEFS Sampler</para>
        </listitem>

        <listitem>
          <para>purpose of NEFS Sampler sections</para>
        </listitem>

        <listitem>
          <para>usage of NEFS Sampler sections</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  &__nef-assumptions__drd5vrj0;

  <section>
    <title>Starting the NEFS Sampler</title>

    <para>There are two ways of exploring the NEFS Sampler:</para>

    <section>
      <title>Trying the NEFS Sampler Application Online</title>

      <para>You may test the Sampler Application online at <ulink
      url="http://www.netspective.com/corp/products/frameworks/try">http://www.netspective.com/corp/products/frameworks/try</ulink>
      All you need is a web browser and you can start using the NEF Sampler
      immediately.</para>

      <para></para>

      <screenshot>
        <graphic fileref="./resources/images/screen-sampler-test-online.gif" />
      </screenshot>
    </section>

    &__nef-sampler-setup__drd8289e;
  </section>

  <section>
    <title>NEFS Sampler Objectives</title>

    <para>As the name suggests, the purpose of NEFS Sampler Application is to
    give you an idea of how easy it is to build J2EE web applications using
    the powerful building blocks provided by our Java Frameworks. The NEFS
    Sampler uses an interactive mode thus making it easy to understand and use
    the samples. It includes various examples of creating forms and input
    fields, performing a variety of different data validations and executing
    forms to provide end-user functionality.</para>

    <para>Although you start with simple NEFS usage examples, as you learn
    more about Sparx and Axiom you will see that flexibility and extensibility
    are also a part of their attributes.</para>
  </section>

  <section>
    <title>Viewing the XDM Code</title>

    <para>The eXtensible Markup Language (XML) plays an important role in
    NEF's ease of use, extensibility, and code generation. NEF declarations
    are performed using XML -- all dialogs, fields, validation rules, some
    conditional processing, all SQL statements, dynamic queries, configuration
    files, database schemas, and many other resources are stored in XML files
    that are re-usable across applications.</para>

    <para><acronym>XDM</acronym> is an acronym for "XML Data Model" and is
    designed to help Java programmers construct and configure Java objects
    using XML files without worrying about parsing and error checking. The
    <filename class="directory">APP_ROOT</filename>/<filename
    class="directory">WEB-INF</filename>/<filename
    class="directory">sparx</filename>/<filename>project.xml</filename> file
    uses XDM to declare all project components.</para>

    <para>In the Sampler app if you see the <guiicon>XML</guiicon> icon along
    with a <emphasis>View Page XDM Code</emphasis> link, at the bottom of the
    page, you can view the Netspective Xml Data Model (XDM) source code for
    various objects on the page. This helps you view the XML code and see it
    working on the same page.</para>

    <screenshot>
      <graphic fileref="./resources/images/screen-sampler-XDM-link.gif" />
    </screenshot>

    <para>The <guiicon>XML</guiicon> icon also appears under various panels
    (like forms/dialogs) to see their code as well.</para>

    <para></para>

    <screenshot>
      <graphic fileref="./resources/images/screen-sampler-view-panel-XDM.gif" />
    </screenshot>

    <para>Clicking on the <emphasis>View Page XDM Code</emphasis> link to see
    the XML code (as shown below):</para>

    <screenshot>
      <graphic fileref="./resources/images/screen-sampler-show-XDM.gif" />
    </screenshot>

    <orderedlist>
      <listitem>
        <para>The link to hide the currently visible XDM code. Clicking on
        this link hides the currently visible XDM code.</para>
      </listitem>

      <listitem>
        <para>Location of the currently open XDM code in the application's
        project file (<filename class="directory">WEB-INF</filename>/<filename
        class="directory">sparx</filename>/<filename>project.xml</filename>).
        Clicking on this link takes you to the <guimenu>Project</guimenu> |
        <guisubmenu>Project Files</guisubmenu> section of the Sampler app's
        Console, with Sampler app project file being displayed in browse
        mode.</para>

        <para><screenshot>
            <graphic fileref="./resources/images/screen-sampler-view-prj-file.gif" />
          </screenshot></para>
      </listitem>

      <listitem>
        <para>Java class file being instantiated for this page. Clicking on
        this link takes you to the <guimenu>Project</guimenu> |
        <guisubmenu>Project Files</guisubmenu> section of the Sampler app's
        Console, with the selected java file
        (<classname>AppPage.java</classname> in this case) being displayed in
        browse mode.</para>

        <para><screenshot>
            <graphic fileref="./resources/images/screen-sampler-view-java.gif" />
          </screenshot></para>
      </listitem>

      <listitem>
        <para>XDM code (from the Sampler app project file) corresponding to
        the currently opened page.</para>
      </listitem>
    </orderedlist>
  </section>

  <section>
    <title>Viewing Project Folder and Files</title>

    <para>At the end of the Sampler App Home page, there is a link for browing
    through all the source directories and files of the Sampler App.</para>

    <screenshot>
      <graphic fileref="./resources/images/screen-sampler-prj-folder-link.gif" />
    </screenshot>

    <para>When you click on the <emphasis>browse</emphasis> link, it takes you
    to the <guimenu>Project</guimenu> | <guisubmenu>Project Files</guisubmenu>
    section of Sampler app Console, displaying all the source folders and
    files for the Sampler app.</para>

    <screenshot>
      <graphic fileref="./resources/images/screen-sampler-prj-folder.gif" />
    </screenshot>
  </section>

  &__sparx-nav-tree-overview__drq9ifdi;

  <section>
    <title>NEFS Sampler Main Components</title>

    <para>The NEFS Sampler groups the samples into following logical
    sections:</para>

    <itemizedlist>
      <listitem>
        <para>Home</para>
      </listitem>

      <listitem>
        <para>Forms Input</para>
      </listitem>

      <listitem>
        <para>Forms Execution</para>
      </listitem>

      <listitem>
        <para>Access Control</para>
      </listitem>

      <listitem>
        <para>Play</para>
      </listitem>

      <listitem>
        <para>Sitemap</para>
      </listitem>

      <listitem>
        <para>Console</para>
      </listitem>

      <listitem>
        <para>Sample Apps Home</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Home</title>

      <para>This is the Welcome page for the Sampler. It outlines the
      objectives of the Sampler and also contains a list of links pointing to
      the logical sections of the Sampler. You may access the Sampler sections
      by these links or the tabs provided the top of the page.</para>

      <screenshot>
        <graphic fileref="./resources/images/screen-sampler-app-home.gif" />
      </screenshot>
    </section>

    <section>
      <title>Forms Input</title>

      <para>This module contains samples that demonstrate how forms and input
      fields are created in Sparx. There are many examples that show how quick
      and easy it is to set up forms to accept input values and automatically
      validate them.</para>

      <para>The examples contained in this section are further divided into
      sub-categories. The <emphasis>Forms Input</emphasis> page contains a
      list of links to its children pages containing the categorized example
      pages. Links to these children pages are also provided through a submenu
      bar under the <emphasis>Forms Input</emphasis> tab.</para>

      <screenshot>
        <graphic fileref="./resources/images/screen-sampler-form-inputs-main.gif" />
      </screenshot>

      <section>
        <title>Text</title>

        <para>The Framework provides different styles of displaying text input
        fields. One is a simple one line text input field while another is a
        multi-line text input field.</para>

        <para>The Line-based text input examples are included under
        <guimenuitem>Line-oriented</guimenuitem> submenu.</para>

        <figure>
          <title>Sample Page for Line-oriented Text Fields</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="./resources/images/screen-sampler-line.gif" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>The sample text fields on this page show the usage of static
        text fields, input text fields (text boxes), <type>email</type> fields
        and masked fields for password entry. You can also see how to
        associate hints with a particular text input field. The example also
        implements field validation. Click on the <command>OK</command> button
        to see how field validation messages are displayed.</para>

        <figure>
          <title>Field Validation Messages</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="./resources/images/screen-sampler-line-validate.gif" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>At times you need multi-line fields (e.g. text area) for your
        text input. The <guimenuitem>Block-oriented</guimenuitem> submenu
        contains examples highlighting the block based text input. <figure>
            <title>Sample Page for Block-oriented Text Fields</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-text-block.gif" />
              </imageobject>
            </mediaobject>
          </figure></para>

        <para>This page shows the usage of <type>memo</type> and template
        fields using custom <acronym>CSS</acronym> and
        <acronym>HTML</acronym>. The sample page also incorporates error
        messages using message boxes (as shown in the above image).</para>
      </section>

      <section>
        <title>Numbers</title>

        <para>This page demonstrates the usage of various types of numeric
        fields that are available: float, integer, currency, phone, and zip
        code. Each type have their own validation rules and formatting
        patterns.</para>

        <figure>
          <title>Sample Page for Numeric Fields</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="./resources/images/screen-sampler-numbers.gif" />
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Boolean</title>

        <para>This page demonstrates usage of boolean fields which are fields
        that can only have a value that is either true or false. There are
        several display styles available for boolean fields: radio,
        check-alone, popup, and combo.</para>

        <figure>
          <title>Sample Page for Boolean Fields</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="./resources/images/screen-sampler-boolean.gif" />
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Selection</title>

        <para>This page demonstrates how to create and use fields that allow
        selection of values. There are several styles available: list,
        multidual, multilist, combo, radio, and multicheck. You can also see
        the implementation for <type>popup</type> based select field.</para>

        <figure>
          <title>Sample Page for Select Fields</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="./resources/images/screen-sampler-select.gif" />
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Conditional Select</title>

        <para>This page demonstrates how to create and use fields that allow
        selection of values and auto submit forms that will do other data
        population from the server side (for conditional values).</para>

        <figure>
          <title>Sample Page for Conditional Select Fields</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="./resources/images/screen-sampler-conditional-select.gif" />
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Grids</title>

        <para>This page demonstrates how to create and use grid and composite
        fields. A composite field can be described as a logical field that
        contains several children fields. Usually, a grid field will have
        multiple composite fields which act as rows.</para>

        <figure>
          <title>Sample Page for Grid and CompositeFields</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="./resources/images/screen-sampler-grids.gif" />
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Conditionals</title>

        <para>This page demonstrates how flags and values can be applied to a
        dialog field based on conditionals defined for that field. Conditional
        fields are fields whose state depends upon the state of other entities
        (in this case, other fields called <emphasis>partner</emphasis>
        fields).</para>

        <figure>
          <title>Sample Page for Conditional Fields</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="./resources/images/screen-sampler-conditional.gif" />
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Popups</title>

        <para>This page demonstrates how to create and use popup fields. Sparx
        provides a feature to display a popup dialog box when a popup icon is
        clicked and values from a selection in the popup can be returned to
        the main window. Popup fields are visually identifiable by their
        special magnifying glass icon beside them.</para>

        <figure>
          <title>Sample Page for Popup Fields</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="./resources/images/screen-sampler-popups.gif" />
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Date/Time</title>

        <para>This page demonstrates how to create and use date/time fields.
        There are several versions of date/time fields that are available:
        time, date, date and time, and duration.</para>

        <figure>
          <title>Sample Page for Date/TimeFields</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="./resources/images/screen-sampler-date-time.gif" />
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Advanced</title>

        <para>This page and its children pages are for demonstrating more
        advanced usage of the built-in features of the dialog fields.</para>

        <section>
          <title>Client-side Script</title>

          <para>This page demonstrates how to "plug" <emphasis>custom
          javascript</emphasis> calls to the client-side events (e.g. click,
          value-changed, lose-focus, key-press, is-valid) of the dialog
          fields.</para>

          <figure>
            <title>Sample Page for Custom Javascript</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-js.gif" />
              </imageobject>
            </mediaobject>
          </figure>
        </section>

        <section>
          <title>Perspectives</title>

          <para>Generally dialogs are used for different data processing
          actions: entering new data, editing existing data, and deleting
          existing data. The Framework considers these separate data
          processing actions as <emphasis>perspectives</emphasis> of the
          dialog. Thus, there are several different perspectives to which a
          dialog can be set to: <emphasis>add</emphasis>,
          <emphasis>edit</emphasis>, <emphasis>delete</emphasis>,
          <emphasis>print</emphasis>, and <emphasis>confirm</emphasis>. This
          page demonstrates the usage of data perspectives for filling dialog
          fields.</para>

          <figure>
            <title>Sample Page for Perspectives</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-perspective.gif" />
              </imageobject>
            </mediaobject>
          </figure>
        </section>

        <section>
          <title>Hidden Fields</title>

          <para>This page demonstrates different usages of <emphasis>hidden
          fields</emphasis> in a dialog. Hidden fields are useful for keeping
          track of information that you don't want the user to see.</para>

          <figure>
            <title>Sample Page for Hidden Fields</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-hidden.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>Click the <command>OK</command> button. The dialog context is
          displayed in debug mode (as shown below). You may check the values
          of the hidden fields and other dialog fields from there.</para>

          <figure>
            <title>Dialog Context Debug Information</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-hidden-dc-debug.gif" />
              </imageobject>
            </mediaobject>
          </figure>
        </section>

        <section>
          <title>Command Fields</title>

          <para>This page demonstrates the usage of a <sgmltag>List</sgmltag>
          command to populate a dialog field. Only certain commands can be
          used for dialog fields. Commands execute arbitrary tasks defined
          either by you or the framework. They are used to encapsulate common
          logic and reuse that logic across pages and dialogs (forms). For
          information on <emphasis>Commands</emphasis> in general, please
          consult the <emphasis>User Manual</emphasis>.</para>

          <figure>
            <title>Sample Page for List Command</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-command.gif" />
              </imageobject>
            </mediaobject>
          </figure>
        </section>
      </section>
    </section>

    <section>
      <title>Forms Execution</title>

      <para>This module contains samples that demonstrate how forms are
      executed in Sparx. While the Forms Input module described how to create
      forms and fields, this module deals with how to perform actions based on
      already validated input. Numerous examples delve into how to perform
      custom validation and execute dialog handlers based on existing Sparx
      functionality or creating your own through inheritance and
      delegation.</para>

      <para>The examples contained in this section are further divided into
      sub-categories. The <emphasis>Forms Execution</emphasis> page contains a
      list of links to its children pages containing the categorized example
      pages. Links to these children pages are also provided through a submenu
      bar under the <emphasis>Forms Execution</emphasis> tab.</para>

      <section>
        <title>Director</title>

        <para>This page demonstrates the usage of a <emphasis>Dialog
        Director</emphasis> which controls destinations after successful form
        submission and the display of the dialog buttons.</para>

        <figure>
          <title>Sample Page for Director</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="./resources/images/screen-sampler-director.gif" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Select the value from the <varname>Next Action</varname> select
        box and click the <command>OK</command> button to see the execution of
        next action for this dialog.</para>

        <para>The XML Code that configures the Dialog Director is given
        below:</para>

        <example>
          <title>XML for Using the Dialog Director</title>

          <programlisting>&lt;project&gt;
...
 &lt;dialog <emphasis>type="exec-sample"</emphasis> name="director-next-action" 
         redirect-after-execute="yes"&gt; <co id="declare-director-tags-eg-1" />
  &lt;frame heading="Test Dialog Director's Next Action"/&gt;
   &lt;field type="html"&gt;
    &lt;body&gt;
      &lt;![CDATA[
        &lt;div class="textbox"&gt;
         Every dialog is associated with a &lt;i&gt;Director&lt;/i&gt; which controls the 
         actions available inside&lt;br&gt;
         the form (such as the &lt;i&gt;Submit&lt;/i&gt; and &lt;i&gt;Cancel&lt;/i&gt; buttons) and the 
         destination page to&lt;br&gt;
         redirect to after the execution of the dialog. Visually the &lt;i&gt;Director&lt;/i&gt; 
         can be configured&lt;br&gt;
         to display multiple destinations to allow users to select the destination 
         as shown in&lt;br&gt;
         this dialog.
        &lt;/div&gt;
        &lt;hr/&gt;
      ]]&gt;
    &lt;/body&gt;
   &lt;/field&gt;
   &lt;field type="text" name="text_field" caption="Text Field (formOrRequestAttr)"
        default="request:value"/&gt;
   &lt;<emphasis>director</emphasis>&gt; <co id="declare-director-tags-eg-2" />
     &lt;<emphasis>next-actions</emphasis> caption="Next Action\:" <emphasis>
                   choices="text-list:Netspective=http\://www.netspective.com;
                                      Google=http\://www.google.com"</emphasis>
                   display-single-action="yes"/&gt; <co
              id="declare-director-tags-eg-3" />
   &lt;/director&gt;
&lt;/dialog&gt;
...
&lt;/project&gt;</programlisting>

          <calloutlist>
            <callout arearefs="declare-director-tags-eg-1">
              <para>The <sgmltag>dialog</sgmltag> tag defines a dialog using
              <sgmltag>exec-sample</sgmltag> template as the
              dialog-type.</para>
            </callout>

            <callout arearefs="declare-director-tags-eg-2">
              <para>The <sgmltag>director</sgmltag> tag is used to define the
              director to be associated with this dialog.</para>
            </callout>

            <callout arearefs="declare-director-tags-eg-3">
              <para>Configuring the director to display multiple
              destinations.</para>
            </callout>
          </calloutlist>
        </example>
      </section>

      <section>
        <title>Templates</title>

        <para>This page demonstrates the ability to
        <emphasis>execute</emphasis> templates or display JSP output after
        successful submission of a dialog. Usually executing a template means
        displaying the output from a template processing engine.</para>

        <section>
          <title>Body in XML</title>

          <para>This page contains an example of a dialog which will execute a
          template body defined in the dialog's XML declaration and display
          the output. The XML template is used to display the Welcome message
          to user.</para>

          <figure>
            <title>Sample Page for Templates using Body in XML</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-template-xml.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>The XML Code for using the
          <productname>FreeMarker</productname> template (embedded within
          <classname>project.xml</classname>) is given below:</para>

          <example>
            <title>XML Code for Using Template (embedded in
            project.xml)</title>

            <programlisting>&lt;project&gt;
...
 &lt;dialog <emphasis>type="exec-sample"</emphasis> name="body-xml"&gt; <co
                id="declare-template-in-prj-file-eg-1" />
    &lt;frame heading="Hello World Form"/&gt;
    &lt;field type="text" name="first_name" caption="First Name" required="yes"/&gt;
    &lt;field type="text" name="last_name" caption="Last Name" required="yes"/&gt;

    &lt;on-execute <emphasis>handler="template"</emphasis>&gt; <co
                id="declare-template-in-prj-file-eg-2" />
        &lt;![CDATA[
        Welcome to NEFS, <emphasis>${vc.fieldStates.getState("first_name").value.textValue}</emphasis> <co
                id="declare-template-in-prj-file-eg-3" />
        ${vc.fieldStates.getState("last_name").value.textValue}.
        &lt;p&gt;Form1 demonstrated how you can take two
        pieces of data and execute an arbritrary 
        &lt;a href="http://www.freemarker.org"&gt;FreeMarker&lt;/a&gt; template embedded in 
        the project.xml file.
        ]]&gt;
    &lt;/on-execute&gt;
 &lt;/dialog&gt;
&lt;/project&gt;</programlisting>

            <calloutlist>
              <callout arearefs="declare-template-in-prj-file-eg-1">
                <para>Declaring a dialog using
                "<sgmltag>exec-sample</sgmltag>" template as the dialog
                type.</para>
              </callout>

              <callout arearefs="declare-template-in-prj-file-eg-2">
                <para>The <sgmltag>handler</sgmltag> attribute of
                <sgmltag>on-execute</sgmltag> tag specifies the
                "<sgmltag>template</sgmltag>" handler for this dialog. Sparx
                provides various handlers for the dialogs (forms):
                <emphasis>include</emphasis>, <emphasis>mail</emphasis>,
                <emphasis>command</emphasis>, <emphasis>panels</emphasis> and
                <emphasis>style-sheet</emphasis>.</para>
              </callout>

              <callout arearefs="declare-template-in-prj-file-eg-3">
                <para>Retrieving the value of dialog (form) fields, from their
                value contexts.</para>
              </callout>
            </calloutlist>
          </example>

          <note>
            <para>In the above example, the template is embedded within
            <filename>project.xml</filename></para>
          </note>
        </section>

        <section>
          <title>Body in File</title>

          <para>This page contains an example of a dialog which will execute a
          template body defined in a seperate file and display the
          output.</para>

          <figure>
            <title>Sample Page for Templates using Body in a Separate
            File</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-template-file.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>This example shows a Welcome message, obtained from a separate
          file, to the user. It also explains the loop attribute of dialog
          tag. To return to the dialog, you will need to click on the
          <emphasis>Return to dialog</emphasis> link provided on the page (as
          shown below):</para>

          <figure>
            <title>Returning to the Dialog</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-template-file-msg.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>The XML Code for using the
          <productname><productname>FreeMarker</productname></productname>
          template (available in a separate file) is given below:</para>

          <example>
            <title>XML Code for Using Template (in a separate file)</title>

            <programlisting>&lt;project&gt;
...
 &lt;dialog type="exec-sample" name="body-file" <emphasis>loop="no"</emphasis>&gt; <co
                id="declare-template-in-sep-file-eg-1" />
    &lt;frame heading="Hello World Form"/&gt;
    &lt;field type="text" name="full_name" caption="Full Name" required="yes"/&gt;
    &lt;field type="date" name="birth_date" caption="Birth Date" required="yes" 
                       popup-calendar="yes"/&gt; 

    &lt;on-execute handler="template"&gt;
        <emphasis>&lt;source&gt;form/exec/template-body-file.ftl&lt;/source&gt;</emphasis> <co
                id="declare-template-in-sep-file-eg-2" />
    &lt;/on-execute&gt;
 &lt;/dialog&gt;
...
&lt;/project&gt;</programlisting>

            <calloutlist>
              <callout arearefs="declare-template-in-sep-file-eg-1">
                <para>The <sgmltag>loop</sgmltag> attribute of
                <sgmltag>dialog</sgmltag> tag is used to specify not to show
                the dialog after the dialog executes.</para>
              </callout>

              <callout arearefs="declare-template-in-sep-file-eg-2">
                <para><sgmltag>Source</sgmltag> tag is used to specify the
                template source file to be used
                (<filename>template-body-file.ftl</filename> in this
                case)</para>
              </callout>
            </calloutlist>
          </example>
        </section>

        <section>
          <title>Body in JSP</title>

          <para>This page contains an example of a dialog which will display
          an output from a JSP upon execution.</para>

          <figure>
            <title>Sample Page for Templates using Body in a JSP File</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-template-jsp.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>This example shows a Welcome message, obtained from a JSP
          file, to the user. It also explains the loop attribute of dialog
          tag. To return to the dialog, you will need to click on the
          <emphasis>Return to dialog</emphasis> link provided on the page (as
          shown below):</para>

          <figure>
            <title>Returning to the Dialog</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-template-jsp-msg.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>The XML Code for using the jsp file is given below:</para>

          <example>
            <title>XML Code for Using a JSP File</title>

            <programlisting>&lt;project&gt;
...
 &lt;dialog type="exec-sample" name="inc-jsp" loop="no"&gt;
    &lt;frame heading="Hello World Form"/&gt;
    &lt;field type="text" name="full_name" caption="Full Name" required="yes"/&gt;
    &lt;field type="date" name="birth_date" caption="Birth Date" required="yes" 
           popup-calendar="yes"/&gt;

    &lt;on-execute <emphasis>handler="include"</emphasis>&gt; <co
                id="declare-template-in-jsp-eg-1" />
        <emphasis>&lt;path&gt;/jsp/template-inc-test.jsp&lt;/path&gt;</emphasis> <co
                id="declare-template-in-jsp-eg-2" />
    &lt;/on-execute&gt;
 &lt;/dialog&gt;
...
&lt;/project&gt;</programlisting>

            <calloutlist>
              <callout arearefs="declare-template-in-jsp-eg-1">
                <para>The <sgmltag>handler</sgmltag> attribute of
                <sgmltag>on-execute</sgmltag> tag specifies the
                "<sgmltag>include</sgmltag>" handler for this dialog.</para>
              </callout>

              <callout arearefs="declare-template-in-jsp-eg-2">
                <para><sgmltag>Path</sgmltag> tag is used to specify the JSP
                file to be used (<emphasis>template-inc-test.jsp</emphasis> in
                this case)</para>
              </callout>
            </calloutlist>
          </example>
        </section>
      </section>

      <section>
        <title>Handlers</title>

        <para>This page demonstrates the usage of various
        <emphasis>handlers</emphasis> for the execution of a dialog. These
        handlers are processed once the internal validation of the dialog is
        complete and the dialog is ready to be be executed. Handlers are
        special built-in actions defined for convenience and reusability:
        <emphasis>url</emphasis>, <emphasis>mail</emphasis>,
        <emphasis>command</emphasis>, <emphasis>panels</emphasis>, and
        <emphasis>style-sheet</emphasis>. For defining more complex actions
        and logic for execution, please take a look at the
        <emphasis>inheritence</emphasis> or <emphasis>delegation</emphasis>
        examples.</para>

        <section>
          <title>Include URL</title>

          <para>This page contains an example of a dialog which has a handler
          that will display HTML from an external page.</para>

          <figure>
            <title>Sample Page for HTML Include of an External Page</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-include-url.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>Enter a URL and click the OK button. The contents of the
          target page, pointed to by this supplied URL, is displayed (as shown
          below):</para>

          <figure>
            <title>Contents of the External Page</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-inc-url-html.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>The XML Code for this example is given below:</para>

          <example>
            <title>XML Code for Including an External Page</title>

            <programlisting>&lt;project&gt;
...
 &lt;dialog type="exec-sample" name="inc-html" loop="prepend" allow-multiple-executes<emphasis>="yes"</emphasis>&gt;
    <emphasis>&lt;loop-separator&gt;&amp;lt;hr size=1&amp;gt;&amp;lt;p&amp;gt;&lt;/loop-separator&gt;</emphasis> <co
                id="declare-include-url-eg-1" />
    &lt;frame heading="Get contents of URL"/&gt;
    &lt;field type="text" name="url" caption="URL" size="60" required="yes" 
           default="http\://www.yahoo.com"&gt;
        &lt;hint&gt;
            Please provide a complete URL such as http\://www.google.com.&amp;lt;br&amp;gt;
            This form will read the contents of the URL and show it below.
        &lt;/hint&gt;
    &lt;/field&gt;

    &lt;on-execute <emphasis>handler="include"</emphasis>&gt; <co
                id="declare-include-url-eg-2" />
        <emphasis>&lt;url&gt;dialog-field:url&lt;/url&gt;</emphasis> <co
                id="declare-include-url-eg-3" />
    &lt;/on-execute&gt;
 &lt;/dialog&gt;
...
&lt;/project&gt;</programlisting>

            <calloutlist>
              <callout arearefs="declare-include-url-eg-1">
                <para>The loop-separator tag specifies a horizontal row to be
                displayed between the dialog and the external page
                content.</para>
              </callout>

              <callout arearefs="declare-include-url-eg-2">
                <para>The <sgmltag>handler</sgmltag> attribute of
                <sgmltag>on-execute</sgmltag> tag specifies the "include"
                handler for this dialog.</para>
              </callout>

              <callout arearefs="declare-include-url-eg-3">
                <para><sgmltag>The URL</sgmltag> tag is used to specify the
                URL of the external page. The <sgmltag>dialog-field</sgmltag>
                static value specifies that the URL is obtained from the
                dialog field named <emphasis>URL</emphasis></para>
              </callout>
            </calloutlist>
          </example>
        </section>

        <section>
          <title>Send Mail</title>

          <para>This page contains an example of a dialog which has a handler
          that will send an email upon execution of the dialog.</para>

          <figure>
            <title>Sample Page for Send Mail</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-send-mail-msg.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>Enter the values for the mail dialog fields and click the
          <command>OK</command> button. A success message is displayed, along
          with the body of the email, if the mail is sent to the specified
          recipient. In case of an error, an appropriate error message is
          displayed.</para>

          <figure>
            <title>Mail Send - Success Message</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-send-mail-msg.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>The XML Code for this example is given below:</para>

          <example>
            <title>XML Code for Using the Mail Handler</title>

            <programlisting>&lt;project&gt;
...
 &lt;dialog type="exec-sample" name="send-mail" loop="append" 
                                             allow-multiple-executes="yes"&gt;
    &lt;frame heading="Send Mail Handler Example"/&gt;
    &lt;field type="text" name="host" caption="Host" required="yes" 
                                   default="mail.netspective.com"/&gt;
    &lt;field type="text" name="from" caption="From" required="yes" 
                                   default="dummy@mail.com"/&gt;
    &lt;field type="text" name="to" caption="To" required="yes"/&gt;
    &lt;field type="text" name="subject" caption="Subject" required="yes"/&gt;
    &lt;field type="memo" name="body" caption="Body"/&gt;

    &lt;on-execute <emphasis>handler="mail"</emphasis>&gt; <co
                id="declare-mail-eg-1" />
        &lt;host&gt;dialog-field:host&lt;/host&gt; <co id="declare-mail-eg-2" />
        &lt;from&gt;dialog-field:from&lt;/from&gt;
        &lt;to&gt;dialog-field:to&lt;/to&gt;
        &lt;subject&gt;dialog-field:subject&lt;/subject&gt;
        &lt;body&gt;You entered this e-mail body: 
                 ${vc.fieldStates.getState("body").value.textValue}&lt;/body&gt; <co
                id="declare-mail-eg-3" />
        &lt;success-message&gt; <co id="declare-mail-eg-4" />
            &lt;![CDATA[
            Thank you for sending e-mail to &lt;code&gt;&lt;b&gt;
                ${vc.fieldStates.getState("to").value.textValue}&lt;/b&gt;&lt;/code&gt;.
            ]]&gt;
        &lt;/success-message&gt;
        &lt;failure-message&gt; <co id="declare-mail-eg-5" />
            &lt;![CDATA[
            Unable to send e-mail to &lt;code&gt;&lt;b&gt;
                ${vc.fieldStates.getState("to").value.textValue}&lt;/b&gt;&lt;/code&gt;.&lt;p&gt;
            Exception:&lt;br&gt;
            &lt;pre&gt;${exception}&lt;/pre&gt; <co id="declare-mail-eg-6" />
            ]]&gt;
        &lt;/failure-message&gt;
    &lt;/on-execute&gt;
 &lt;/dialog&gt;
...
&lt;/project&gt;</programlisting>

            <calloutlist>
              <callout arearefs="declare-mail-eg-1">
                <para>The <sgmltag>handler</sgmltag> attribute of
                <sgmltag>on-execute</sgmltag> tag specifies the "mail" handler
                for this dialog.</para>
              </callout>

              <callout arearefs="declare-mail-eg-2">
                <para><sgmltag>The host </sgmltag>tag is used to specify the
                address for the mailing host. The
                <sgmltag>dialog-field</sgmltag> static value specifies that
                the mailing Host address is obtained from the dialog field
                named <emphasis>host.</emphasis></para>
              </callout>

              <callout arearefs="declare-mail-eg-3">
                <para>Displays the email's body text.</para>
              </callout>

              <callout arearefs="declare-mail-eg-4">
                <para>The success-message tag specifies the message to be
                displayed when the email is successfully sent to the supplied
                recipient.</para>
              </callout>

              <callout arearefs="declare-mail-eg-5">
                <para>The failure-message tag specifies the message to be
                displayed when the email is not sent to the supplied recipient
                due to some error.</para>
              </callout>

              <callout arearefs="declare-mail-eg-6">
                <para>Displays the details of exception, in the error
                message.</para>
              </callout>
            </calloutlist>
          </example>
        </section>

        <section>
          <title>Exec Command</title>

          <para>This page contains an example of a dialog which has a handler
          that will process a command upon execution of the dialog. Enter the
          command and click the <command>OK</command> button to see the
          command execution result.</para>

          <figure>
            <title>Execute Command</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-exec-cmd.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>The XML Code for this example is given below:</para>

          <example>
            <title>XML Code for Using the Command Handler</title>

            <programlisting>&lt;project&gt;
...
&lt;dialog type="exec-sample" name="exec-cmd" allow-multiple-executes="yes"&gt;
    &lt;frame heading="Command Handler Example"/&gt;
    &lt;field type="text" name="command" caption="Command" required="yes" size="60"/&gt;

    &lt;on-execute <emphasis>handler="command"</emphasis> <emphasis>command-expr="dialog-field:command"</emphasis>/&gt; <co
                id="declare-command-eg-1" />
&lt;/dialog&gt;
...
&lt;/project&gt;</programlisting>

            <calloutlist>
              <callout arearefs="declare-command-eg-1">
                <para>The <sgmltag>handler</sgmltag> attribute of
                <sgmltag>on-execute</sgmltag> tag specifies the "command"
                handler for this dialog. The <sgmltag>command-expr</sgmltag>
                field specifies the dialog field named
                <varname>command</varname> as the source for the command
                expression.</para>
              </callout>
            </calloutlist>
          </example>
        </section>

        <section>
          <title>Exec Panels</title>

          <para>This page contains an example of a dialog which has a handler
          that will display panels upon execution of the dialog. The panels
          can contain HTML from various entities such as JSPs or URLs.</para>

          <figure>
            <title>Sample Page for Execution of Panels</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-exec-handler.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>Provide a local source for HTML
          (<literal>/jsp/panel-inc-test.jsp</literal> in the above example)
          for <varname>Include Local</varname> field and a URL
          (<literal>http://www.yahoo/com</literal> in this case) as the value
          for <varname>Command 2</varname> field. Click the
          <command>OK</command> button. The HTML contents from the JSP and the
          yahoo web site are displayed in two different panels (as shown
          below):</para>

          <figure>
            <title>HTML Loaded in Two Panels</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-exec-handler-msg.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>The XML Code for this example is given below:</para>

          <example>
            <title>XML Code for Using the Panels Handler</title>

            <programlisting>&lt;project&gt;
...
 &lt;dialog type="exec-sample" name="exec-panels" allow-multiple-executes="yes"&gt;
    &lt;frame heading="Panels Handler Example"/&gt;
    &lt;field type="text" name="local-include" caption="Include local" required="yes" 
                       size="60" default="/jsp/panel-inc-test.jsp"/&gt;
    &lt;field type="text" name="remote-include" caption="Command 2" required="yes" 
                       size="60" default="http\://www.yahoo.com"/&gt;

    &lt;on-execute <emphasis>handler="panels"</emphasis> <emphasis>style="two-columns"</emphasis>&gt; <co
                id="declare-panels-eg-1" />
        &lt;panel <emphasis>type="include"</emphasis> <emphasis>path="dialog-field:local-include"</emphasis>&gt; <co
                id="declare-panels-eg-2" />
            &lt;frame <emphasis>heading="dialog-field:local-include"</emphasis>/&gt; <co
                id="declare-panels-eg-3" />
        &lt;/panel&gt;
        &lt;panel type="include" <emphasis>URL="dialog-field:remote-include"</emphasis>&gt; <co
                id="declare-panels-eg-4" />
            &lt;frame heading="dialog-field:remote-include"/&gt;
        &lt;/panel&gt;
    &lt;/on-execute&gt;
 &lt;/dialog&gt;
...
&lt;/project&gt;</programlisting>

            <calloutlist>
              <callout arearefs="declare-panels-eg-1">
                <para>The <sgmltag>handler</sgmltag> attribute of
                <sgmltag>on-execute</sgmltag> tag specifies the "panels"
                handler for this dialog. The <sgmltag>style</sgmltag> field
                specifies how the panels will be arranged in the output HTML.
                In this example, the panels will be arranged in two columns
                (one panel per column).</para>
              </callout>

              <callout arearefs="declare-panels-eg-2">
                <para>Declaring the panel. The <sgmltag>type</sgmltag>
                attribute specifies the use of "<sgmltag>include</sgmltag>"
                template as the panel type. The <sgmltag>path</sgmltag>
                attribute uses a value-source to get the path from where the
                include file will be obtained. In the above example, this path
                value is obtained from the dialog field named
                <varname>local-include</varname>.</para>
              </callout>

              <callout arearefs="declare-panels-eg-3">
                <para>The <sgmltag>heading</sgmltag> attribute of this frame
                specifies the value of the dialog-field named
                <varname>local-include</varname> as the heading for the
                frame.</para>
              </callout>

              <callout arearefs="declare-panels-eg-4">
                <para>The <sgmltag>URL</sgmltag> attribute of this panel tag
                specifies the URL for the external page. In the above example,
                the value for the external page's URL is obtained from the
                dialog-field named <varname>remote-include</varname>.</para>
              </callout>
            </calloutlist>
          </example>
        </section>

        <section>
          <title>Transform Bean</title>

          <para>This page contains an example of a dialog which has a handler
          that will display output from a XSL style sheet transformation upon
          execution of the dialog.</para>

          <figure>
            <title>Sample Page for XSL Transformation</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-transform-bean.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>The XSL style sheet is provided in the dialog. Click on the
          <command>OK</command> button to see the transformed XML describing
          the dialog's <emphasis>Context Bean</emphasis> (as shown
          below):</para>

          <figure>
            <title>Transformed XML Describing the Dialog's Context
            Bean</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-transform-bean-1.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>The XML Code for this example is given below:</para>

          <example>
            <title>XML Code for Using the Style-Sheet Handler (Transform
            Bean)</title>

            <programlisting>&lt;project&gt;
...
 &lt;dialog type="exec-sample" name="transform-xslt-dc" loop="prepend" 
                                                     allow-multiple-executes="yes"&gt;
  &lt;frame heading="XSLT Handler Example"/&gt;    
   &lt;field type="select" name="style-sheet-file" caption="Style sheet File" 
                                                     required="yes" 
          <emphasis>choices="filesystem-entries:servlet-context-path:/form/exec,\.xsl$,yes"</emphasis>/&gt; <co
                id="declare-transform-bean-eg-1" />

  &lt;on-execute <emphasis>handler="style-sheet"</emphasis>&gt; <co
                id="declare-transform-bean-eg-2" />
      <emphasis>&lt;style-sheet-file&gt;dialog-field:style-sheet-file&lt;/style-sheet-file&gt;</emphasis> <co
                id="declare-transform-bean-eg-3" />
  &lt;/on-execute&gt;
 &lt;/dialog&gt;
...
&lt;/project&gt;</programlisting>

            <calloutlist>
              <callout arearefs="declare-transform-bean-eg-1">
                <para>The <sgmltag>choices</sgmltag> attribute declares the
                list of XSL files from which the user can select. The
                <sgmltag>filesystem-entries</sgmltag> value-source specifies
                the list of all XSL files, available from the path specified
                by servlet context path, to be used as the entries for the
                select field.</para>
              </callout>

              <callout arearefs="declare-transform-bean-eg-2">
                <para>The <sgmltag>handler</sgmltag> attribute of
                <sgmltag>on-execute</sgmltag> tag specifies the "style-sheet"
                handler for this dialog.</para>
              </callout>

              <callout arearefs="declare-transform-bean-eg-3">
                <para>The <sgmltag>style-sheet-file tag </sgmltag>specifies
                the XSL file to be used for transformation. In the above
                example, this value is obtained from the
                <varname>style-sheet-file</varname> field of the
                dialog.</para>
              </callout>
            </calloutlist>
          </example>
        </section>

        <section>
          <title>Transform File</title>

          <para>This page contains an example of a dialog which has a handler
          that will display output from a XSL style sheet transformation upon
          execution of the dialog.</para>

          <figure>
            <title>Sample Page for XSL Transformation</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-transform-file.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>This dialog asks for a source XML or XSL file to be converted.
          The XSL to be applied can also be selected using the
          <varname>Stylesheet File</varname> select field in the dialog.
          Select the XML <filename>test-transform.xml</filename> file as the
          <varname>Source File</varname> and click the <command>OK</command>
          button. The transformed XML is displayed (as shown below):</para>

          <figure>
            <title>Transformed XML File</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-transform-file-1.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>You may also test the transformation of the XSL source file
          itself by selecting it as the source file. The transformed XSL file
          is displayed (as shown below):</para>

          <figure>
            <title>Transformed XSL File</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-transform-file-2.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>The XML Code for this example is given below:</para>

          <example>
            <title>XML Code for Using the Style-Sheet Handler (Transform
            File)</title>

            <programlisting>&lt;project&gt;
...
 &lt;dialog type="exec-sample" name="transform-xslt-file" loop="prepend" allow-multiple-executes="yes"&gt;
    &lt;frame heading="XSLT Handler Example"/&gt;
    &lt;field type="select" name="source-file" caption="Source File" required="yes" 
           choices="filesystem-entries:servlet-context-path:/form/exec,\.x[sm]l$,yes"/&gt;
    &lt;field type="select" name="style-sheet-file" caption="Stylesheet File" 
           required="yes" 
           choices="filesystem-entries:servlet-context-path:/form/exec,\.xsl$,yes"/&gt;

    &lt;on-execute handler="style-sheet"&gt;
        &lt;source-file&gt;dialog-field:source-file&lt;/source-file&gt; <co
                id="declare-transform-file-eg-1" />
        &lt;style-sheet-file&gt;dialog-field:style-sheet-file&lt;/style-sheet-file&gt;
    &lt;/on-execute&gt;
 &lt;/dialog&gt;
...
&lt;/project&gt;</programlisting>

            <calloutlist>
              <callout arearefs="declare-transform-file-eg-1">
                <para>The <sgmltag>source-file tag </sgmltag>specifies the
                file on which XSL transformation is applied.</para>
              </callout>
            </calloutlist>
          </example>
        </section>
      </section>

      <section>
        <title>Inheritance</title>

        <para>This page demonstrates the <emphasis>inheritance</emphasis>
        model for defining custom logic or action for different stages of a
        dialog. This model should only be used for the most complex cases
        where you need to override the default behavior of the dialog. By
        extending the default dialog class, com.netspective.sparx.form.Dialog,
        you have full control over the dialog and its behavior.</para>

        <section>
          <title>Exec 1 A</title>

          <para>This page contains a dialog which has a custom dialog class
          that overrides only the default execution behavior of the
          dialog.</para>

          <figure>
            <title>Sample Page for Handling Dialog 1A (through
            Inheritance)</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-dialog-1a.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>Enter a value for <varname>Full Name</varname> field and click
          the <command>OK</command> button. The custom Java class
          (<classname>SampleExecuteDialog</classname> in this case) displays a
          <emphasis>Welcome</emphasis> message along with the supplied name
          (as shown below):</para>

          <figure>
            <title>Welcome Message Generated by the Custom Class</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-dialog-1a-msg.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>The welcome message also displays the link to the custom class
          being used as the dialog handler.</para>

          <para>The XML Code for this example is given below:</para>

          <example>
            <title>XML Code for Using Custom Handler (Inheritance)</title>

            <programlisting>&lt;project&gt;
...
 &lt;dialog type="exec-sample" name="exec1a" <emphasis>
                            class="app.form.exec.inheritance.SampleExecuteDialog"</emphasis>&gt; <co
                id="declare-inherit-handler-eg-1" />
    &lt;frame heading="Inheritance Execute Sample 1a"/&gt;
    &lt;field type="text" name="full_name" caption="Full Name" required="yes"/&gt;
 &lt;/dialog&gt;
...
&lt;/project&gt;</programlisting>

            <calloutlist>
              <callout arearefs="declare-inherit-handler-eg-1">
                <para>the <sgmltag>class</sgmltag> attribute of the dialog tag
                specifies the custom class
                (<classname>SamplerExecuteDialog</classname> in this case) to
                be used as the handler for this dialog</para>
              </callout>
            </calloutlist>
          </example>

          <para>You may view the code for custom Java class using the link
          provided in the welcome message. This opens the Java source code in
          the Console (as shown below):</para>

          <figure>
            <title>Source File for Custom Class (Inheritance)</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-inherit-custom-class.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <example>
            <title>Custom Dialog Handler Class (using Inheritance)</title>

            <programlisting><emphasis>package app.form.exec.inheritance;</emphasis> <co
                id="declare-inherit-class-eg-1" />

       <co id="declare-inherit-class-eg-2" />
import java.io.Writer;
import java.io.IOException;

import com.netspective.sparx.form.Dialog;
import com.netspective.sparx.form.DialogContext;
import com.netspective.sparx.form.DialogExecuteException;
import com.netspective.sparx.form.DialogsPackage;
import com.netspective.sparx.Project;
  <emphasis>
public class SampleExecuteDialog extends Dialog</emphasis> <co
                id="declare-inherit-class-eg-3" />
{
    public SampleExecuteDialog(Project project)
    {
        super(project);
    }

    public SampleExecuteDialog(Project project, DialogsPackage pkg)
    {
        super(project, pkg);
    }

    <emphasis>public void execute(Writer writer, DialogContext dc) 
                      throws IOException, DialogExecuteException</emphasis> <co
                id="declare-inherit-class-eg-4" />
    {
      writer.write("Welcome to NEFS &lt;b&gt;" + 
            <emphasis>dc.getFieldStates().getState("full_name").getValue().getTextValue()</emphasis> + <co
                id="declare-inherit-class-eg-5" />
            "&lt;/b&gt;. ");
      writer.write("You are running the dialog called &lt;b&gt;"+ dc.getDialog().getName() 
            +"&lt;/b&gt; in package &lt;b&gt; "+
            dc.getDialog().getNameSpace().getNameSpaceId() +"&lt;/b&gt;.");

      <emphasis>if(dc.getDialog().getQualifiedName().equals("form.exec.inheritance.exec1b"))</emphasis> <co
                id="declare-inherit-class-eg-6" />
          writer.write("&lt;p&gt;You are &lt;b&gt;"+ 
                        dc.getFieldStates().getState("age").getValue().getIntValue() 
                        + "&lt;/b&gt; years old."); 

      writer.write("&lt;p&gt;");
      writer.write("This code demonstrated how you can take two pieces of data and " +
                   "execute an arbritrary class by setting the 'class' attribute of "+ 
                   "the dialog. ");
      writer.write("This method of execution is called &lt;i&gt;Dialog Inheritance&lt;/i&gt;. ");

      <emphasis>String relativePath = 
             /WEB-INF/classes/app/form/exec/inheritance/SampleExecuteDialog.java"; </emphasis><co
                id="declare-inherit-class-eg-7" />
      <emphasis>String sourceFileLink = dc.getConsoleFileBrowserLinkShowAlt(dc.getServlet().getServletConfig().getServletContext().getRealPath(relativePath),
                  relativePath);</emphasis> <co
                id="declare-inherit-class-eg-8" />
      writer.write("You may review the code at " + sourceFileLink + ".");
      writer.write("&lt;p&gt;");
      writer.write("&lt;a href=\""+ <emphasis>dc.getNavigationContext().getActivePage().getName()</emphasis> +
                   "\"&gt;Clear the dialog&lt;/a&gt;"); <co
                id="declare-inherit-class-eg-9" />
    }
}</programlisting>

            <calloutlist>
              <callout arearefs="declare-inherit-class-eg-1">
                <para>Declaring the package for this class.</para>
              </callout>

              <callout arearefs="declare-inherit-class-eg-2">
                <para>Importing other required classes.</para>
              </callout>

              <callout arearefs="declare-inherit-class-eg-3">
                <para>Extending the <classname>Dialog</classname> class to
                provide custom implementation.</para>
              </callout>

              <callout arearefs="declare-inherit-class-eg-4">
                <para>Declaring the dialog <methodname>execute</methodname>
                method which is called as soon as all dialog data is entered
                and validated.</para>
              </callout>

              <callout arearefs="declare-inherit-class-eg-5">
                <para>Retrieving the value of the dialog field named full_name
                from the dialog context and sending it to the writer.</para>
              </callout>

              <callout arearefs="declare-inherit-class-eg-6">
                <para>Checking the dialog name after retrieving it from the
                dialog context. If the dialog name is exec1b, the Age related
                message is also displayed in the output HTLML.</para>
              </callout>

              <callout arearefs="declare-inherit-class-eg-7">
                <para>Declaring a variable containing the relative path of
                this Java file.</para>
              </callout>

              <callout arearefs="declare-inherit-class-eg-8">
                <para>Getting the link to the source file of custom dialog
                handler class (<filename>SampleExecuteDialog.java</filename>
                in this case). The
                <methodname>getConsoleFileBrowserLinkShowAlt</methodname>
                method shows the name of the file that is passed into the
                first parameter. If the second parameter is also passed, the
                URL (anchor) reference shows an alternate text within the
                anchor.</para>
              </callout>

              <callout arearefs="declare-inherit-class-eg-8">
                <para>Retrieving the current page's name from the Navigation
                Context.</para>
              </callout>
            </calloutlist>

            <para><note>
                <para>This custom dialog handler class takes care of
                <sgmltag>exec1A</sgmltag> and <sgmltag>exec2a</sgmltag> both,
                in case of Sampler App.</para>
              </note></para>
          </example>
        </section>

        <section>
          <title>Exec 1 B</title>

          <para>This page contains a dialog which has a custom dialog class
          that overrides only the default execution behavior of the
          dialog.</para>

          <figure>
            <title>Sample Page for Handling Dialog 1B (through
            Inheritance)</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-dialog-1b.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>Enter a value for <varname>Full Name</varname> and
          <varname>Age</varname> fields and click the <command>OK</command>
          button. In the Sampler App, the custom Java class
          <classname>SampleExecuteDialog</classname> handles this dialog as
          well. Note the message about the supplied age (as shown
          below):</para>

          <figure>
            <title>Welcome Message Generated by the Custom Class</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-dialog-1b-msg.gif" />
              </imageobject>
            </mediaobject>
          </figure>
        </section>

        <section>
          <title>Validation</title>

          <para>This page contains a dialog which has a custom dialog class
          that overrides the default population, validation, and execution
          behaviors of the dialog.</para>

          <figure>
            <title>Sample Page for Validation using Custom Class (through
            Inheritance)</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-inherit-validate.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>Enter the values for the dialog fields and click the
          <command>OK</command> button (as shown in the image above). The
          custom validation class (<classname>SampleValidateDialog</classname>
          in this case) checks the entered values and displays the validation
          messages, if any (as shown below):</para>

          <figure>
            <title>Validation Messages Generated by Custom Class</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-inherit-validate-msg.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>The XML Code for this example is given below:</para>

          <example>
            <title>XML Code for Validation Custom Class (Inheritance)</title>

            <programlisting>&lt;project&gt;
...
 &lt;dialog type="exec-sample" name="validate" <emphasis>
         class="app.form.exec.inheritance.SampleValidateDialog"</emphasis> 
         <emphasis>generate-dcb="yes"</emphasis>&gt; <co
                id="declare-inherit-valid-eg-1" />
    &lt;frame heading="Inheritance Validate Sample"/&gt;
    &lt;field type="text" name="full_name" caption="Full Name" required="yes"/&gt;
    &lt;field type="date" name="birth_date" caption="Birth Date" required="yes" 
                                                              max="today"/&gt;
    &lt;field type="integer" name="age" caption="Age" required="yes" min="1" max="150"/&gt;
 &lt;/dialog&gt;
...
&lt;/project&gt;</programlisting>

            <calloutlist>
              <callout arearefs="declare-inherit-valid-eg-1">
                <para>Declaring the custom class handling the dialog (form)
                validation. The <sgmltag>generate-dcb</sgmltag> attribute
                specifies the generation of auto-generated Dialog Context Bean
                (DCB).</para>
              </callout>
            </calloutlist>
          </example>

          <para>The code for custom validation class is given below. Note that
          this class extends the <classname>Dialog</classname> class to
          provide custom implementation.</para>

          <example>
            <title>Custom Dialog Validation Handler Class (using
            Inheritance)</title>

            <programlisting>package app.form.exec.inheritance; 

import java.io.Writer;
import java.io.IOException;
import java.util.Date;
import java.util.Calendar;
import auto.dcb.form.exec.inheritance.ValidateContext;

import com.netspective.sparx.form.Dialog;
import com.netspective.sparx.form.DialogContext;
import com.netspective.sparx.form.DialogExecuteException;
import com.netspective.sparx.form.DialogsPackage;
import com.netspective.sparx.form.field.DialogField;
import com.netspective.sparx.Project;

public class SampleValidateDialog extends Dialog 
{
  public SampleValidateDialog(Project project)
 {
     super(project);
 }

 public SampleValidateDialog(Project project, DialogsPackage pkg)
 {
     super(project, pkg);
 }

 public void populateValues(DialogContext dc, int formatType) <co
                id="declare-inherit-valid-handler-eg-1" />
 {
     super.populateValues(dc, formatType);

     if(dc.getDialogState().isInitialEntry() &amp;&amp; 
        formatType == DialogField.DISPLAY_FORMAT) <co
                id="declare-inherit-valid-handler-eg-2" />
     {
         ValidateContext validateContext = new ValidateContext(dc); <co
                id="declare-inherit-valid-handler-eg-3" />
         Date birthDate = validateContext.getBirthDate().getDateValue();
         if(birthDate == null) 
         {
             Calendar cal = Calendar.getInstance();
             // assume we're 25 years old  
             cal.set(Calendar.YEAR, cal.get(Calendar.YEAR) - 25); 

             validateContext.getBirthDate().setValue(cal.getTime());
         }
     }
 }

 public boolean isValid(DialogContext dc) <co
                id="declare-inherit-valid-handler-eg-4" />
 {
     if(! super.isValid(dc)) <co id="declare-inherit-valid-handler-eg-5" />
         return false;
      ValidateContext validateContext = new ValidateContext(dc);
      Date birthDate = validateContext.getBirthDate().getDateValue();
      int age = validateContext.getAge().getIntValue();
                    
                    <co id="declare-inherit-valid-handler-eg-6" />
      Calendar cal = Calendar.getInstance();
      int currentYear = cal.get(Calendar.YEAR);
      cal.setTime(birthDate);
      int yearOfBirth = cal.get(Calendar.YEAR);

      if(currentYear - yearOfBirth != age) 
      {
       dc.getValidationContext().addError("The Age and Birth Date fields "+
                                              "do not match."); <co
                id="declare-inherit-valid-handler-eg-7" />

                                 <co id="declare-inherit-valid-handler-eg-8" />
       validateContext.getBirthDateField().invalidate(dc, "If you want the age to be "+ 
                age + " then birth date should be in year " + (currentYear - age));
       validateContext.getAgeField().invalidate(dc, "If you want the birth year to be "+ 
                yearOfBirth +" then age should be " + (currentYear - yearOfBirth));

       return false; <co id="declare-inherit-valid-handler-eg-9" />
      }

      return true;
 }

 public void execute(Writer writer, DialogContext dc) 
                                        throws IOException, DialogExecuteException <co
                id="declare-inherit-valid-handler-eg-10" />
 {
  writer.write("Congratulations &lt;b&gt;" 
                + dc.getFieldStates().getState("full_name").getValue().getTextValue() + 
                "&lt;/b&gt;! ");
  writer.write("It seems that your birthdate and ages match correctly.");
  writer.write("&lt;p&gt;");
  writer.write("This code demonstrated how you can take two three pieces of data, "+
              "have Sparx individually validate the general fields such as text, "+
              "date, and integer but add your own custom validator some other logic"+
              " by overriding the isValid() method of the "+
              "com.netspective.sparx.form.Dialog class.&lt;p&gt;");

  String relativePath = "/WEB-INF/classes/app/inheritance/SampleValidateDialog.java";
  writer.write("You may review the code at " + dc.getConsoleFileBrowserLinkShowAlt(dc.getServlet().getServletConfig().getServletContext().getRealPath(relativePath), relativePath));
  writer.write("&lt;p&gt;");
  writer.write("&lt;a href=\""+ 
  dc.getNavigationContext().getActivePage().getName() +"\"&gt;Clear the dialog&lt;/a&gt;");
 }
}</programlisting>

            <calloutlist>
              <callout arearefs="declare-inherit-valid-handler-eg-1">
                <para>This method is called each time the dialog is displayed
                to the user and fields need their values populated. By
                default, Sparx handles populates almost all the value
                population. But, sometimes, you may want to populate something
                programmatically.</para>
              </callout>

              <callout arearefs="declare-inherit-valid-handler-eg-2">
                <para>Only put data into the fields if we're displaying the
                data for the first time. If it's not the initial entry, it
                means that there's an error on the screen and the fields need
                to be populated with the data entered by the user.</para>
              </callout>

              <callout arearefs="declare-inherit-valid-handler-eg-3">
                <para>Using the auto-generated dialog context bean (DCB) for
                user data retrieval. DCB is a type-safe wrapper around the
                general-purpose <classname>DialogContext</classname>.
                Declaring a validation context for current user's
                dialog.</para>
              </callout>

              <callout arearefs="declare-inherit-valid-handler-eg-4">
                <para>The <methodname>isValid</methodname> method is called
                right before <methodname>execute</methodname> to validate the
                dialog. If you need to perform any validation that the fields
                can't perform on their own (such as cross-field validation),
                you should perform it here. The <varname>dc</varname>
                parameter contains reference to the
                <classname>DialogContext</classname> containing the field
                values and states.</para>
              </callout>

              <callout arearefs="declare-inherit-valid-handler-eg-5">
                <para>Check if any of the default validation failed. If yes,
                leave this method.</para>
              </callout>

              <callout arearefs="declare-inherit-valid-handler-eg-6">
                <para>Find out the current year and the year of birth entered
                by the user.</para>
              </callout>

              <callout arearefs="declare-inherit-valid-handler-eg-7">
                <para>Add an error message, at the dialog level, if the custom
                validation condition fails. The error message is added to the
                validation context of the dialog context.</para>
              </callout>

              <callout arearefs="declare-inherit-valid-handler-eg-8">
                <para>In case of failure, add error messages to each field as
                well.</para>
              </callout>

              <callout arearefs="declare-inherit-valid-handler-eg-9">
                <para>Return "false" so the dialog does not go into execute
                mode until you have valid data.</para>
              </callout>

              <callout arearefs="declare-inherit-valid-handler-eg-10">
                <para>The dialog <methodname>execute</methodname> method is
                called as soon as all data is entered and validated. This
                method is guaranteed to be called <emphasis>only</emphasis>
                when all fields' data is valid.</para>
              </callout>
            </calloutlist>
          </example>

          <note>
            <para>This custom dialog validation handler class (using
            inheritance) takes care of <sgmltag>exec1A</sgmltag> and
            <sgmltag>exec2a</sgmltag> both, in case of Sampler App.</para>
          </note>
        </section>
      </section>

      <section>
        <title>Delegation</title>

        <para>This page demonstrates the delegation model for defining custom
        logic or action for different stages of a dialog. The Framework allows
        definition of various listeners for different stages of a dialog. By
        implementing the listener interfaces and then assigning the custom
        listeners to a dialog, these listeners will get executed.</para>

        <note>
          <para>Inheritance is used for large-scale customizations and
          enhancing the framework itself while delegation is used to implement
          listeners and event processing customizations. Although both methods
          are supported, the delegation model is recommened to help ensure
          that changes in the NEF APIs do not affect your code.</para>
        </note>

        <section>
          <title>Exec 1 A</title>

          <para>This page demonstrates an <emphasis>execution</emphasis>
          listener for the <emphasis>delegation</emphasis> model. An execution
          listener implements the
          com.netspective.sparx.form.handler.DialogExecuteHandler
          interface.</para>

          <figure>
            <title>Sample Page for Handling Dialog 1A (through
            Delegation)</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-deleg-1a.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>Enter a value for <varname>Full Name</varname> field and click
          the <command>OK</command> button. The custom Java class
          (<classname>SampleExecuteHandler</classname> in this case) displays
          a <emphasis>Welcome</emphasis> message along with the supplied name
          (as shown below):</para>

          <figure>
            <title>Welcome Message Generated by the Custom Class</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-deleg-1a-msg.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>The XML Code for this example is given below:</para>

          <example>
            <title>XML Code for Using Custom Handler (Delegation)</title>

            <programlisting>&lt;project&gt;
...
 &lt;dialog type="exec-sample" name="exec1a"&gt;
    &lt;frame heading="Delegation Execute Sample 1a"/&gt;
    &lt;field type="text" name="full_name" caption="Full Name" required="yes"/&gt;

    &lt;<emphasis>on-execute</emphasis> <emphasis>class="app.form.exec.delegation.SampleExecuteHandler"</emphasis>/&gt; <co
                id="declare-delegate-handler-eg-1" />
 &lt;/dialog&gt;
...
&lt;/project&gt;</programlisting>

            <calloutlist>
              <callout arearefs="declare-delegate-handler-eg-1">
                <para>the <sgmltag>class</sgmltag> attribute of the
                <sgmltag>on-execute</sgmltag> tag specifies the custom class
                (<classname>SampleExecuteHandler</classname> in this case) to
                be used as the listener for this dialog.</para>
              </callout>
            </calloutlist>
          </example>

          <para>You may view the code for custom Java class using the link
          provided in the welcome message. This opens the Java source code in
          the Console (as shown below):</para>

          <figure>
            <title>Source File for Custom Class (Delegation)</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-delegate-custom-class.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <example>
            <title>Custom Dialog Handler Class (using Delegation)</title>

            <programlisting>package app.form.exec.delegation; <co
                id="declare-delegate-class-eg-1" />

    <co id="declare-delegate-class-eg-2" />
import java.io.Writer;
import java.io.IOException;

import com.netspective.sparx.form.handler.DialogExecuteHandler;
import com.netspective.sparx.form.DialogContext;
import com.netspective.sparx.form.DialogExecuteException;

public class SampleExecuteHandler implements DialogExecuteHandler <co
                id="declare-delegate-class-eg-3" />
{
    public void executeDialog(Writer writer, DialogContext dc) 
                              throws IOException, DialogExecuteException <co
                id="declare-delegate-class-eg-4" />
    {
      writer.write("Welcome to NEFS &lt;b&gt;" + 
       dc.getFieldStates().getState("full_name").getValue().getTextValue() + "&lt;/b&gt;. ");<co
                id="declare-delegate-class-eg-5" />
                     
      writer.write("You are running the dialog called &lt;b&gt;"+ dc.getDialog().getName() +
        "&lt;/b&gt; in package &lt;b&gt;"+ dc.getDialog().getNameSpace().getNameSpaceId() +
        "&lt;/b&gt;.");

      if (dc.getDialog().getQualifiedName().equals("form.exec.delegation.exec1b")) <co
                id="declare-delegate-class-eg-6" />
        writer.write("&lt;p&gt;You are &lt;b&gt;"+ 
                     dc.getFieldStates().getState("age").getValue().getIntValue() 
                     + "&lt;/b&gt; " + "years old.");

        writer.write("&lt;p&gt;");
        writer.write("This code demonstrated how you can take two pieces of data and "+
                     "execute an arbritrary class by supplying an &amp;lt;on-execute&amp;gt; "+
                     "tag in the &amp;lt;dialog&amp;gt;. ");
        writer.write("This method of execution is called &lt;i&gt;Dialog Delegation&lt;/i&gt; "+
                     "because a class separate from the Dialog class handles the "+
                     "execution.&lt;p&gt;");

        String relativePath = 
               "/WEB-INF/classes/app/form/exec/delegation/SampleExecuteHandler.java"; <co
                id="declare-delegate-class-eg-7" />
        String sourceFileLink = dc.getConsoleFileBrowserLinkShowAlt(dc.getServlet().getServletConfig().getServletContext().getRealPath(relativePath),
                      relativePath); <co id="declare-delegate-class-eg-8" />
        writer.write("You may review the code at " + sourceFileLink + ".");
        writer.write("&lt;p&gt;");
        writer.write("&lt;a href=\""+ dc.getNavigationContext().getActivePage().getName() 
                       +"\"&gt;Clear the dialog&lt;/a&gt;"); <co
                id="declare-delegate-class-eg-9" />
    }
}

 
 </programlisting>

            <calloutlist>
              <callout arearefs="declare-delegate-class-eg-1">
                <para>Declaring the package for this class.</para>
              </callout>

              <callout arearefs="declare-delegate-class-eg-2">
                <para>Importing other required classes.</para>
              </callout>

              <callout arearefs="declare-delegate-class-eg-3">
                <para>Implementing the
                <interfacename>DialogExecuteHandler</interfacename>
                interface.</para>
              </callout>

              <callout arearefs="declare-delegate-class-eg-4">
                <para>Declaring the dialog
                <methodname>executeDialog</methodname> method which is called
                as soon as all dialog data is entered and validated.</para>
              </callout>

              <callout arearefs="declare-delegate-class-eg-5">
                <para>Retrieving the value of the dialog field named full_name
                from the dialog context and sending it to the writer.</para>
              </callout>

              <callout arearefs="declare-delegate-class-eg-6">
                <para>Checking the dialog name after retrieving it from the
                dialog context. If the dialog name is exec1b, the Age related
                message is also displayed in the output HTLML.</para>
              </callout>

              <callout arearefs="declare-delegate-class-eg-7">
                <para>Declaring a variable containing the relative path of
                this Java file.</para>
              </callout>

              <callout arearefs="declare-delegate-class-eg-8">
                <para>Getting the link to the source file of custom dialog
                handler class (<filename>SampleExecuteHandler.java</filename>
                in this case). The
                <methodname>getConsoleFileBrowserLinkShowAlt</methodname>
                method shows the name of the file that is passed into the
                first parameter. If the second parameter is also passed, the
                URL (anchor) reference shows an alternate text within the
                anchor.</para>
              </callout>

              <callout arearefs="declare-delegate-class-eg-9">
                <para>Retrieving the current page's name from the Navigation
                Context.</para>
              </callout>
            </calloutlist>

            <para><note>
                <para>This custom class takes care of
                <sgmltag>exec1A</sgmltag> and <sgmltag>exec2a</sgmltag> both,
                in case of Sampler App.</para>
              </note></para>
          </example>
        </section>

        <section>
          <title>Exec 1 B</title>

          <para>This page demonstrates an <emphasis>execution</emphasis>
          listener for the <emphasis>delegation</emphasis> model. An execution
          listener implements the
          com.netspective.sparx.form.handler.DialogExecuteHandler
          interface.</para>

          <figure>
            <title>Sample Page for Handling Dialog 1B (through
            Delegation)</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-deleg-1b.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>Enter a value for <varname>Full Name</varname> and
          <varname>Age</varname> fields and click the <command>OK</command>
          button. In the Sampler App, the custom Java class
          <classname>SampleExecuteHandler</classname> handles this dialog as
          well. Note the message about the supplied age (as shown
          below):</para>

          <figure>
            <title>Welcome Message Generated by the Custom Class</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-deleg-1b-msg.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>You may view the code for custom Java class using the link
          provided in the message. This opens the Java source code in the
          Console.</para>

          <figure>
            <title>Source File for Custom Class</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-deleg-class.gif" />
              </imageobject>
            </mediaobject>
          </figure>
        </section>

        <section>
          <title>Validation</title>

          <para>This page contains a dialog that demonstrates
          <emphasis>validation</emphasis>, <emphasis>population</emphasis>,
          and <emphasis>execution</emphasis> listeners for the
          <emphasis>delegation</emphasis> model. A listener class can
          implement various listener interfaces to define custom business
          logic for various dialog stages.</para>

          <figure>
            <title>Sample Page for Validation using Custom Class (through
            Delegation)</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-deleg-validate.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>Enter the values for the dialog fields and click the
          <command>OK</command> button (as shown in the image above). The
          custom validation class (<classname>SampleValidateDialog</classname>
          in this case) checks the entered values and displays the validation
          messages, if any (as shown below):</para>

          <figure>
            <title>Validation Messages Generated by Custom Class</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./resources/images/screen-sampler-deleg-validate-msg.gif" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>The XML Code for this example is given below:</para>

          <example>
            <title>XML Code for Validation Custom Class (Delegation)</title>

            <programlisting>&lt;project&gt;
...
 &lt;dialog type="exec-sample" name="validate" <emphasis>generate-dcb="yes"</emphasis>&gt; <co
                id="declare-delegate-valid-eg-1" />
    &lt;frame heading="Delegation Validate Sample"/&gt;
    &lt;field type="text" name="full_name" caption="Full Name" required="yes"/&gt;
    &lt;field type="date" name="birth_date" caption="Birth Date" required="yes" 
                                                              max="today"/&gt;
    &lt;field type="integer" name="age" caption="Age" required="yes" min="1" max="150"/&gt;

    &lt;<emphasis>listener</emphasis> <emphasis>class="app.form.exec.delegation.SampleValidateHandler"</emphasis>/&gt; <co
                id="declare-delegate-valid-eg-2" />
 &lt;/dialog&gt;

...
&lt;/project&gt;</programlisting>

            <calloutlist>
              <callout arearefs="declare-delegate-valid-eg-1">
                <para>The <sgmltag>generate-dcb</sgmltag> attribute specifies
                the generation of auto-generated Dialog Context Bean
                (DCB).</para>
              </callout>

              <callout arearefs="declare-delegate-valid-eg-2">
                <para>The <sgmltag>class</sgmltag> attribute of the
                <sgmltag>listener</sgmltag> tag declares the dialog listener
                to be used for custom validation.</para>
              </callout>
            </calloutlist>
          </example>

          <para>The code for custom validation class, using delegation, is
          given below. Note that this class implements the
          <interfacename>DialogValidateListener</interfacename>,
          <interfacename>DialogPopulateListener</interfacename> and
          <interfacename>DialogExecuteHandler</interfacename> interfaces to
          provide custom implementation.</para>

          <example>
            <title>Custom Dialog Validation Handler Class (using
            Delegation)</title>

            <programlisting>package app.form.exec.delegation;

import java.io.Writer;
import java.io.IOException;
import java.util.Date;
import java.util.Calendar;

import auto.dcb.form.exec.delegation.ValidateContext;

import com.netspective.sparx.form.DialogContext;
import com.netspective.sparx.form.DialogExecuteException;
import com.netspective.sparx.form.DialogValidationContext;
import com.netspective.sparx.form.handler.DialogExecuteHandler;
import com.netspective.sparx.form.listener.DialogValidateListener;
import com.netspective.sparx.form.listener.DialogPopulateListener;
import com.netspective.sparx.form.field.DialogField;

public class SampleValidateHandler implements DialogValidateListener, 
                                              DialogPopulateListener, 
                                              DialogExecuteHandler 
{
 <emphasis>public void populateDialogValues(DialogContext dc, int formatType)</emphasis> <co
                id="declare-delegate-valid-handler-eg-1" />
 {
  if(dc.getDialogState().isInitialEntry() &amp;&amp; formatType==DialogField.DISPLAY_FORMAT) <co
                id="declare-delegate-valid-handler-eg-2" />
  {
    ValidateContext validateContext = new ValidateContext(dc); <co
                id="declare-delegate-valid-handler-eg-3" />
    Date birthDate = validateContext.getBirthDate().getDateValue();
    if(birthDate == null)
    {
     Calendar cal = Calendar.getInstance();
     // assume we're 25 years old
     cal.set(Calendar.YEAR, cal.get(Calendar.YEAR) - 25); 
     validateContext.getBirthDate().setValue(cal.getTime());
    }
  }
 }

 public void validateDialog(DialogValidationContext dvc) <co
                id="declare-delegate-valid-handler-eg-4" />
 {
   ValidateContext validateContext = new ValidateContext(dvc.getDialogContext());
   Date birthDate = validateContext.getBirthDate().getDateValue();
   int age = validateContext.getAge().getIntValue();
 
              <co id="declare-delegate-valid-handler-eg-5" />
   Calendar cal = Calendar.getInstance();   
   int currentYear = cal.get(Calendar.YEAR);
   cal.setTime(birthDate);
   int yearOfBirth = cal.get(Calendar.YEAR);

   if(currentYear - yearOfBirth != age)
   {
    <emphasis>dvc.addError</emphasis>("The Age and Birth Date fields do not match."); <co
                id="declare-delegate-valid-handler-eg-6" />
    <emphasis>validateContext.getBirthDateField().</emphasis><emphasis>invalidate</emphasis>(dvc.getDialogContext(), "If you "+
                 "want the age to be "+ age +" then birth date should be in year " + 
                  (currentYear - age)); <co
                id="declare-delegate-valid-handler-eg-7" />
    validateContext.getAgeField().invalidate(dvc.getDialogContext(), "If you want "+
                 " the birth year to be " + yearOfBirth +" then age should be " + 
                  (currentYear - yearOfBirth));
   }
 }<emphasis>
 public void executeDialog(Writer writer, DialogContext dc) 
             throws IOException, DialogExecuteException</emphasis> <co
                id="declare-delegate-valid-handler-eg-8" />
 {
   writer.write("Congratulations &lt;b&gt;" + 
                 dc.getFieldStates().getState("full_name").getValue().getTextValue() 
                 + "&lt;/b&gt;! "); 
   writer.write("It seems that your birthdate and ages match correctly.");
   writer.write("&lt;p&gt;");
   writer.write("This code demonstrated how you can take two three pieces of data, "+
                "have Sparx individually validate the general fields such as text, "+
                "date, and integer but add your own custom validator some other "+
                "logic by creating listeners for various events such as population,"+
                " validation, and execution.&lt;p&gt;");

   String relativePath = 
              "/WEB-INF/classes/app/form/exec/delegation/SampleValidateHandler.java";
   writer.write("You may review the code at " + dc.getConsoleFileBrowserLinkShowAlt(
    dc.getServlet().getServletConfig().getServletContext().getRealPath(relativePath), 
                                                           relativePath));
   writer.write("&lt;p&gt;");
   writer.write("&lt;a href=\""+ dc.getNavigationContext().getActivePage().getName() 
                +"\"&gt;Clear the dialog&lt;/a&gt;");
 }

}</programlisting>

            <calloutlist>
              <callout arearefs="declare-delegate-valid-handler-eg-1">
                <para>Declaring custom implementation for
                <methodname>populateDialogValues</methodname> method of
                <interfacename>DialogPopulateListener</interfacename>. This
                method is called each time the dialog is displayed to the user
                and fields need their values populated. By default, Sparx
                handles populates almost all the value population. But,
                sometimes, you may want to populate something
                programmatically.</para>
              </callout>

              <callout arearefs="declare-delegate-valid-handler-eg-2">
                <para>Only put data into the fields if we're displaying the
                data for the first time. If it's not the initial entry, it
                means that there's an error on the screen and the fields need
                to be populated with the data entered by the user.</para>
              </callout>

              <callout arearefs="declare-delegate-valid-handler-eg-3">
                <para>Using the auto-generated dialog context bean (DCB) for
                user data retrieval. DCB is a type-safe wrapper around the
                general-purpose <classname>DialogContext</classname>.
                Declaring a validation context for current user's
                dialog.</para>
              </callout>

              <callout arearefs="declare-delegate-valid-handler-eg-4">
                <para>The <methodname>validateDialog</methodname> method is
                called right before <methodname>execute</methodname> to
                validate the dialog. If you need to perform any validation
                that the fields can't perform on their own (such as
                cross-field validation), you should perform it here. The
                <varname>dvc</varname> parameter contains reference to the
                <classname>DialogValidationContext</classname> containing the
                dialog's validation context.</para>
              </callout>

              <callout arearefs="declare-delegate-valid-handler-eg-5">
                <para>Find out the current year and the year of birth entered
                by the user.</para>
              </callout>

              <callout arearefs="declare-delegate-valid-handler-eg-6">
                <para>Add an error message, at the dialog level, if the custom
                validation condition fails. The error message is added to the
                dialog validation context.</para>
              </callout>

              <callout arearefs="declare-delegate-valid-handler-eg-7">
                <para>In case of failure, add error messages to each field as
                well.</para>
              </callout>

              <callout arearefs="declare-delegate-valid-handler-eg-8">
                <para>The <methodname>executeDialog</methodname> method is
                called as soon as all data is entered and validated. This
                method is guaranteed to be called <emphasis>only</emphasis>
                when all fields' data is valid.</para>
              </callout>
            </calloutlist>
          </example>

          <note>
            <para>This custom dialog validation handler class (using
            delegation) takes care of <sgmltag>exec1A</sgmltag> and
            <sgmltag>exec2a</sgmltag> both, in case of Sampler App.</para>
          </note>
        </section>
      </section>
    </section>

    <section>
      <title>Access Control</title>

      <para>This module is for demonstrating how the Access Control feature
      can be used. This feature is for setting up roles and capabilities to
      handle controlling access to various parts of an application. An
      application user can be assigned a role which will control whether or
      not the user can access a page, a report, a dialog, or even a
      field.</para>

      <para>The examples contained in this section are further divided into
      sub-categories. The <emphasis>Access Control</emphasis> page contains a
      list of links to its children pages containing the categorized example
      pages. Links to these children pages are also provided through a sub
      menu bar under the <emphasis>Access Control</emphasis> tab.</para>

      <section>
        <title>Change Role</title>

        <para>This page is for changing a Role assigned to the user. A Role
        (<sgmltag>role</sgmltag>) is a logical grouping of a set of
        permissions and permissions are usually defined and grouped logically
        also. By assigning a permission (<sgmltag>permission</sgmltag>) to a
        role, its child permissions are also automatically assigned. Changing
        a role might result in a completely new set of permissions or just one
        permission being added or removed.</para>

        <figure>
          <title>Changing User Roles</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="./resources/images/screen-sampler-change-role.gif" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Select a new user role from the <varname>Available
        Roles</varname> select box and click the <command>OK</command> button
        to assign a new role to the user.</para>

        <figure>
          <title>Role Changed</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="./resources/images/screen-sampler-change-role.gif" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>The links visible in the Navigation Menu bar change based on the
        selected Role. When you change the role from
        <sgmltag>acl/role/super-user</sgmltag> to
        <sgmltag>acl/role/super-user/role</sgmltag>, the navigation menu bar
        links change from <guimenuitem>Test2</guimenuitem> and
        <guimenuitem>Test3</guimenuitem> to
        <guimenuitem>Test1</guimenuitem>.</para>

        <figure>
          <title>Navigation Menu Changed After Role Change</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="./resources/images/screen-sampler-roles-links-changed.gif" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Test the Access Control option by further changing the role and
        observing the change in the links visible on the Navigation Menu
        bar.</para>
      </section>

      <section>
        <title>Test 1</title>

        <para>This page is hidden in the navigation menu when the user has the
        following permission: /acl/app/forms/execution. Clicking on this link
        from the Navigation Menu bar displays a message informing you about
        the permission rights currently available:</para>

        <figure>
          <title>Permission Available Message</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="./resources/images/screen-sampler-has-permission-1.gif" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>When this link is not visible in the navigation menu tab, you
        may select it from the <emphasis>Access Control</emphasis>
        page.</para>
      </section>

      <section>
        <title>Test 2</title>

        <para>This page is hidden in the navigation menu when the user lacks
        the following permission: /acl/app/forms/execution. You may click on
        this link from the Access Control page. You may also test it from the
        Navigation Menu bar when it is visible there.</para>
      </section>

      <section>
        <title>Test 3</title>

        <para>This page is hidden in the navigation menu when the user lacks
        the following permission: /acl/app/forms. You may click on this link
        from the Access Control page. You may also test it from the Navigation
        Menu bar when it is visible there.</para>
      </section>
    </section>

    <section>
      <title>Play</title>

      <para>Now that you have learnt the use of some more features of the
      framework, it is time for you to start creating your own applications!
      The Play page gives you a chance to learn by writing your own code. You
      can do this by updating the WEB-INF\sparx\play-page.xml file. The Play
      page provides you the opportunity to test the functionality of your
      newly written code.</para>

      <figure>
        <title>Page for Creating and Testing Your Own Code</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="./resources/images/screen-sampler-play-page.gif" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Sitemap</title>

      <para>Sparx provides you with the facility to create sitemaps for your
      web sites using templates. The <emphasis>Sitemap</emphasis> page
      demonstrates this facility by providing a sitemap for the Sampler
      App.</para>

      <figure>
        <title>Sampler App Sitemap</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="./resources/images/screen-sampler-sitemap.gif" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Console</title>

      <para>Like every other NEFS application, the Sampler also has a Console.
      This Console can be accessed through the Console section. You will see
      the application Console login screen.</para>

      <para><screenshot>
          <graphic fileref="./resources/images/screen-console-login.gif" />
        </screenshot></para>

      <para>The Console's default User Id is <literal>'console</literal>' and
      the default Password is <literal>'console'</literal>(each without
      quotes). Unless otherwise specified, that is the User Id and Password
      combination you should use if the Console prompts you to login. Please
      refer to the <emphasis>Enterprise Console Tour</emphasis> for more
      details about the Console.</para>
    </section>

    <section>
      <title>Sample Apps Home</title>

      <para>This section takes you to the Sample Apps Home page on the
      Netspective web site.</para>

      <screenshot>
        <graphic fileref="./resources/images/screen-books-samples-page.gif" />
      </screenshot>
    </section>
  </section>

  <section>
    <title>Conclusion</title>

    <para>Congratulations! You have explored some of the core concepts
    provided by NEFS. You have learnt how to create your dialogs and input
    fields using Sparx. You have seen examples describing a variety of
    powerful Sparx components to build your web applications. You can now
    build your own applications that incorporate custom validation, custom
    dialog handlers and access control. To learn about more advance concepts,
    try the other sample applications.</para>
  </section>
</article>