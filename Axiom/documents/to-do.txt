* [IMPORTANT] -- wherever a "close()" method is called for result sets and exceptions are being thrown, be sure to capture the close() in a try..finally block (reported by Aye)
* [IMPORTANT] -- allowd for pooled/cached PreparedStatements in Queries (tests show that prepared statements are 20% slower than non-prepared unless they are reused)
* Add new 'denormalize-ref' foreign key type that would allow automated table denomalization to occur through DAL
* Start using SPI for Query, Query Definition, Schema, etc
* Add feature that would allow rows to be automatically read immediately after an insert/update in case triggers fire in the database
* Considering 'public', 'private', 'system', 'application', 'entity', 'visibility' type column and table modifiers so that auto-generating forms would be easier
* Use SPI for finding code generation classes (DAL, SQL, etc)
* Allow 'access' (read-only/read-write) modifier on columns so that DAL knows whether to generate accessor/mutators appropriately
* Consider schema-type schema templates (just like table-type and data-type templates for tables/columns)
* In schema manager, improve automatically generated table Query Definitions with more features such a foreign key references, parent references, etc.
* Complete optimistic locking of an object/row using a Timestamp or Integer column. When conflicts occur, throw an ObjectHasChanged exception.
* Try and catch required, maxlength, and other DAL exceptions prior to the values getting to the JDBC driver (add additional validation rules).
* Add capability to create <data> tags within <table> tags to supply DDL-time data (like <enumerations> except generic).
* Add capability to store the data-types (domain names and descriptions) to columns so that DBDDs can pick them up (all inherited data-types).
* Add capability to store the table-type (table inheritance) to tables so that DBDDs can pick them up (all inherited table-types).
* Add "description" column to enumerations so that each row can contain documentation on itself.
* Add column, table, abbrev validations in collections so that duplicated abbreviations and names are not allowed.
* Add relationship descriptions to foreign keys like they are defined in "Universal Data Models" -- this will allow better DBDDs.
* Add support for validation of "exclusive arcs" where only one of a set of columns should have data (mutually exlusive column values).
* Change 'self-ref' nomenclature to 'recursive-ref'?
* Add java triggers to foreign keys declarations so that onadd/onupdate/etc runs whenever the referenced value changes.
* Add Jakarta DBCP connection pooling as another ConnectionProvider.
* Add flag to Query class that would allow usage of normal Statements with SQL injection instead of just prepared statements with bind parameters.
* Allow <query> tags to be added under <schema> that would simply allow the <schema> to act as a namespace.
* Add result set iterator (paging) base classes from Sparx (should this really be in reports data source?).
* Add timeouts and auto-refresh logic to DAL objects so that Rows can re-read themselves after a period of time (useful for caching data).
* Add column-level or row-level encryption and support for searching encrypted columns.
* Allow inserts/updates/deletes to use Rows as well as Row so that multiple records can be built into rows and then inserted/updated at once.
* Add support for "Axiom Auto-inc" column where column key value is generated using the design pattern in Java Enterprise Best Practices.
* Allow self-ref foreign keys to generate DAL code that would load a complete hierarchy.
* Add listener support to queries so that methods are called before/after running (to allow other apps to "watch" queries).
* Add ACLs in queries, query-defs, schemas, and DAL.
* Add DAL-style java class generation for static queries.
* Create pluggable cacheable ResultSets with configurable timeouts.
* Add SchemaDoc totals (tables, columns, etc) to the application Metrics.
* For each getXXXByYYY() method add an existsXXXWithYYY() method to check for simple existence.
* Add more features to the bulk upload/download via XML (like updates/deletes, exporting to XML, etc).
* Add Supertype/Subtype tables like http://jrf.sourceforge.net/advancedTopics.html#SubtypeTables.
* Add Linking of related objects at retrieval time through the use of a postFind() method. This will be a "find" trigger analogous to insert/update/delete triggers.
* Add validation listeners that can augment validation system.
* Review jRelationalFramework (http://jrf.sourceforge.net/), Torque (http://db.apache.org/torque), and Alzabo (http://alzabo.sourceforge.net/) for new DAL features.
* Review http://java.sun.com/blueprints/patterns/DAO.html to consider other items needed by a DAO.
* Review http://db.apache.org/ojb/index.html to see if OJB has any applicability to Axiom.
* Add feature to maintain object identity (multiple lookups on a given table with same primary key should return one and the same object)
* Add CSV, Tab-delimited, and other text import/export formats with full support for validation, auto-key generation, etc
* Use the Axiom/documents/sample-graphviz-schema-code.dot GraphViz dot example file to beef up dot graph generation from Schemas.
* Consider using JGo (www.nwoods.com/go) for graphics output of ERDs to SVG and other formats.
* Come up with a better name for SchemaDoc and stick to it.
* Consider using 'proxies' for DAL -- is DAL just a SQL proxy that can plug into JDO, EJBs, etc?
* Allow reverse engineering policies that includ standard mappings from JDBC data types to axiom.xml data-types.