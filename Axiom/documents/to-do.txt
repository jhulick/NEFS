* Add GraphViz DOT diagrams for data-types and table-types usage in schemas (i.e. showing which table-types, data-types are used by which tables)
* Add new 'denormalize-ref' foreign key type that would allow automated table denomalization to occur through DAL
* Create schema-type schema templates (just like table-type and data-type templates for tables/columns)
* Catch required, maxlength, and other DAL exceptions prior to the values getting to the JDBC driver (add additional validation rules).
* Add capability to create <data> tags within <table> tags to supply DDL-time data (like <enumerations> except generic).
* Add "description" column to enumerations so that each row can contain documentation on itself but not be placed into the .
* Add column, table, abbrev validations in collections so that duplicated abbreviations and names are not allowed.
* Add relationship descriptions to foreign keys like they are defined in "Universal Data Models" -- this will allow better DBDDs.
* Add support for validation of "exclusive arcs" where only one of a set of columns should have data (mutually exlusive column values).
* Change 'self-ref' nomenclature to 'recursive-ref'?
* Add java triggers to foreign keys declarations so that onadd/onupdate/etc runs whenever the referenced value changes.
* Add Jakarta DBCP connection pooling as another ConnectionProvider -- this will allow app-server-independent connection pooling and allow control through console.
* Add flag to Query class that would allow usage of normal Statements with SQL injection instead of just prepared statements with bind parameters. Is this a good idea??
* Allow <query> tags to be added under <schema> that would simply allow the <schema> to act as a namespace.
* Add column-level or row-level encryption and support for searching encrypted columns.
* Allow inserts/updates/deletes to use Rows as well as Row so that multiple records can be built into rows and then inserted/updated at once.
* Add support for "Axiom Auto-inc" column where column key value is generated using the design pattern in Java Enterprise Best Practices.
* Allow self-ref foreign keys to generate DAL code that would load a complete hierarchy.
* Create pluggable cacheable ResultSets with configurable timeouts.
* Add SchemaDoc totals (tables, columns, etc) to the application Metrics.
* Add more features to the bulk upload/download via XML (like updates/deletes, exporting to XML, etc).
* Add Supertype/Subtype tables like http://jrf.sourceforge.net/advancedTopics.html#SubtypeTables.
* Add Linking of related objects at retrieval time through the use of a postFind() method. This will be a "find" trigger analogous to insert/update/delete triggers.
* Add validation listeners that can augment validation system.
* Add CSV, Tab-delimited, and other text import/export formats with full support for validation, auto-key generation, etc
* Use the Axiom/documents/sample-graphviz-schema-code.dot GraphViz dot example file to beef up dot graph generation from Schemas.
* Consider using JGo (www.nwoods.com/go) for graphics output of ERDs to SVG and other formats.
* Consider using 'proxies' for DAL -- is DAL just a SQL proxy that can plug into JDO, EJBs, etc?

* Review jRelationalFramework (http://jrf.sourceforge.net/), Torque (http://db.apache.org/torque), and Alzabo (http://alzabo.sourceforge.net/) for new DAL features.
* Review http://java.sun.com/blueprints/patterns/DAO.html to consider other items needed by a DAO.
* Review http://db.apache.org/ojb/index.html to see if OJB has any applicability to Axiom.
* Review http://ldbc.sourceforge.net/ (Liberty Database Connectivity) which provides a single API and SQL rewriter for various databases
* Review http://jakarta.apache.org/commons/codec/index.html and implement soundex, metaphone, etc encoders to save/search those encodings using query defs and such
* Take a look at DBD::Multiplex (multiplexing DBD driver for Perl) and see if it makes sense to implement in Axiom
* Take a look at http://c-jdbc.objectweb.org/doc/index.html (Cluster JDBC) for clustering heterogeneous databases using just JDBC
* Take a look at http://www.p6spy.com/ for an open source framework for applications that intercept and optionally modify database statements (monitor JDBC operations).
* Take a look at http://www.phworks-online.com/cache.html for a caching JDBC driver.