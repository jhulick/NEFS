/*
 * Copyright (c) 2000-2004 Netspective Communications LLC. All rights reserved.
 *
 * Netspective Communications LLC ("Netspective") permits redistribution, modification and use of this file in source
 * and binary form ("The Software") under the Netspective Source License ("NSL" or "The License"). The following
 * conditions are provided as a summary of the NSL but the NSL remains the canonical license and must be accepted
 * before using The Software. Any use of The Software indicates agreement with the NSL.
 *
 * 1. Each copy or derived work of The Software must preserve the copyright notice and this notice unmodified.
 *
 * 2. Redistribution of The Software is allowed in object code form only (as Java .class files or a .jar file
 *    containing the .class files) and only as part of an application that uses The Software as part of its primary
 *    functionality. No distribution of the package is allowed as part of a software development kit, other library,
 *    or development tool without written consent of Netspective. Any modified form of The Software is bound by these
 *    same restrictions.
 *
 * 3. Redistributions of The Software in any form must include an unmodified copy of The License, normally in a plain
 *    ASCII text file unless otherwise agreed to, in writing, by Netspective.
 *
 * 4. The names "Netspective", "Axiom", "Commons", "Junxion", and "Sparx" are trademarks of Netspective and may not be
 *    used to endorse or appear in products derived from The Software without written consent of Netspective.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" WITHOUT A WARRANTY OF ANY KIND. ALL EXPRESS OR IMPLIED REPRESENTATIONS AND
 * WARRANTIES, INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT,
 * ARE HEREBY DISCLAIMED.
 *
 * NETSPECTIVE AND ITS LICENSORS SHALL NOT BE LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE OR ANY THIRD PARTY AS A
 * RESULT OF USING OR DISTRIBUTING THE SOFTWARE. IN NO EVENT WILL NETSPECTIVE OR ITS LICENSORS BE LIABLE FOR ANY LOST
 * REVENUE, PROFIT OR DATA, OR FOR DIRECT, INDIRECT, SPECIAL, CONSEQUENTIAL, INCIDENTAL OR PUNITIVE DAMAGES, HOWEVER
 * CAUSED AND REGARDLESS OF THE THEORY OF LIABILITY, ARISING OUT OF THE USE OF OR INABILITY TO USE THE SOFTWARE, EVEN
 * IF IT HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
 */
package com.netspective.axiom.sql;

import java.io.IOException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;

import com.netspective.commons.text.DelimitedValuesWriter;

public class DelimitedResultsSetWriter
{
    public interface ColumnValueFormatter
    {
        public String formatColumnValue(DelimitedResultsSetWriter drsw, ResultSet resultSet, int columnNumber);
    }

    private ResultSet resultSet;
    private DelimitedValuesWriter writer;
    private String[] columnHeadings;
    private boolean writeHeaderRow;
    private boolean autoGenerateHeadings;
    private boolean preferColumnLabelsForAutoGeneratedHeadings;

    /**
     * A single column value formatter that will be called for all columns that need to be written
     */
    private ColumnValueFormatter columnValueFormatter;

    /**
     * A list of column value formatters that will provide only specific columns that need to be called for formatting;
     * any columns without a formatter will use the default string format
     */
    private ColumnValueFormatter[] columnValueFormatters;

    public DelimitedResultsSetWriter(ResultSet resultSet, DelimitedValuesWriter writer)
    {
        this(resultSet, writer, true, true);
    }

    public DelimitedResultsSetWriter(ResultSet resultSet, DelimitedValuesWriter writer, ColumnValueFormatter columnValueFormatter)
    {
        this(resultSet, writer, columnValueFormatter, true, true);
    }

    public DelimitedResultsSetWriter(ResultSet resultSet, DelimitedValuesWriter writer, ColumnValueFormatter[] columnValueFormatters)
    {
        this(resultSet, writer, columnValueFormatters, true, true);
    }

    public DelimitedResultsSetWriter(ResultSet resultSet, DelimitedValuesWriter writer, boolean writeHeaderRow, boolean preferColumnLabelsForAutoGeneratedHeadings)
    {
        this.resultSet = resultSet;
        this.writer = writer;
        this.writeHeaderRow = writeHeaderRow;
        this.autoGenerateHeadings = true;
        this.preferColumnLabelsForAutoGeneratedHeadings = preferColumnLabelsForAutoGeneratedHeadings;
    }

    public DelimitedResultsSetWriter(ResultSet resultSet, DelimitedValuesWriter writer, ColumnValueFormatter columnValueFormatter, boolean writeHeaderRow, boolean preferColumnLabelsForAutoGeneratedHeadings)
    {
        this(resultSet, writer, writeHeaderRow, preferColumnLabelsForAutoGeneratedHeadings);
        this.columnValueFormatter = columnValueFormatter;
    }

    public DelimitedResultsSetWriter(ResultSet resultSet, DelimitedValuesWriter writer, ColumnValueFormatter[] columnValueFormatters, boolean writeHeaderRow, boolean preferColumnLabelsForAutoGeneratedHeadings)
    {
        this(resultSet, writer, writeHeaderRow, preferColumnLabelsForAutoGeneratedHeadings);
        this.columnValueFormatters = columnValueFormatters;
    }

    public DelimitedResultsSetWriter(ResultSet resultSet, DelimitedValuesWriter writer, String[] columnHeadings)
    {
        this.writer = writer;
        this.resultSet = resultSet;
        this.autoGenerateHeadings = false;
        this.writeHeaderRow = true;
        this.columnHeadings = columnHeadings;
    }

    public DelimitedResultsSetWriter(ResultSet resultSet, DelimitedValuesWriter writer, ColumnValueFormatter columnValueFormatter, String[] columnHeadings)
    {
        this(resultSet, writer, columnHeadings);
        this.columnValueFormatter = columnValueFormatter;
    }

    public DelimitedResultsSetWriter(ResultSet resultSet, DelimitedValuesWriter writer, ColumnValueFormatter[] columnValueFormatters, String[] columnHeadings)
    {
        this(resultSet, writer, columnHeadings);
        this.columnValueFormatters = columnValueFormatters;
    }

    public boolean isAutoGenerateHeadings()
    {
        return autoGenerateHeadings;
    }

    public String[] getColumnHeadings()
    {
        return columnHeadings;
    }

    public ColumnValueFormatter getColumnValueFormatter()
    {
        return columnValueFormatter;
    }

    public boolean isPreferColumnLabelsForAutoGeneratedHeadings()
    {
        return preferColumnLabelsForAutoGeneratedHeadings;
    }

    public ResultSet getResultSet()
    {
        return resultSet;
    }

    public boolean isWriteHeaderRow()
    {
        return writeHeaderRow;
    }

    public DelimitedValuesWriter getWriter()
    {
        return writer;
    }

    public int write() throws SQLException, IOException
    {
        if(writeHeaderRow)
        {
            if(autoGenerateHeadings)
                columnHeadings = ResultSetUtils.getInstance().getColumnHeadings(resultSet, preferColumnLabelsForAutoGeneratedHeadings);
            writer.writeln(columnHeadings);
        }

        ResultSetMetaData rsmd = resultSet.getMetaData();
        int columnsCount = rsmd.getColumnCount();
        int rowCount = 0;

        if(columnValueFormatter != null)
        {
            while(resultSet.next())
            {
                for(int i = 0; i < columnsCount; i++)
                    writer.writeln(columnValueFormatter.formatColumnValue(this, resultSet, i + 1));
                writer.writeln();
                rowCount++;
            }
        }
        else if(columnValueFormatters != null)
        {
            while(resultSet.next())
            {
                for(int i = 0; i < columnsCount; i++)
                {
                    ColumnValueFormatter formatter = columnValueFormatters[i];
                    if(formatter != null)
                        writer.writeln(formatter.formatColumnValue(this, resultSet, i + 1));
                    else
                        writer.writeln(resultSet.getString(i + 1));
                }
                writer.writeln();
                rowCount++;
            }
        }
        else
        {
            while(resultSet.next())
            {
                for(int i = 0; i < columnsCount; i++)
                    writer.writeln(resultSet.getString(i + 1));
                writer.writeln();
                rowCount++;
            }
        }

        writer.flush();
        return rowCount;
    }
}
