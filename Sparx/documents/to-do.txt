* Start using http://jwebunit.sourceforge.net/ (JWebUnit) to automate web-based unit testing for Sparx
* Add feature that allows Navigation tree to "remember" the last child it was viewing (using cookies) so that traversal will be easier for users (won't have to go down the hierarchy)
* Create "Define, Declare, Test, Customize, Deploy" tutorials
* Add feature to hide/disable submit buttons once the submit button is pressed (in case it takes time to submit something) -- perhaps replace button with "please wait..."
* Create a 16x16 Console icon that will appear in browser window tabs and URL address line
* Use http://informa.sourceforge.net/ RSS library to setup RSS panels that can connect to RSS channels via URLs or files
* Add documentation capability to TemplateProducers and TemplateConsumers so that those documentation resources may be displayed in Console.
* Consider removing the capability to create 'dialog' and 'query' tags outside of 'dialogs' and 'queries' package tags. Might be easier to document/explain.
* Add ability for child element tag documentation to be retrieved from createXXX, addXXX, or class javadoc in that order (right now only class definition javadoc is used).
* In DialogFieldConditionalAction is 'name' attribute needed anymore? If not, remove it. Also, move partner-field-name out of main class into subclasses that need them? It would make auto-documentation easier.
* Need to add support for saving DialogContext values into XML (like Sparx 2.3 "pending" dialogs)
* Need to move DialogField.Flags from inner class to package class DialogFieldFlags so that XDM can instantiate it (for documentation) without requiring parent class [see problem in 'conditional' tag]
* Need to add support for table dialogs (from Sparx 2.3)
* Need to conduct detailed memory leak analysis, performance testing, stress/load testing (see http://www.pushtotest.com)
* Add debug mode to pages that will show the location, class, and other data about each element (such where a panel is coming from) -- maybe even a DebugFlags for NavigationTree
* Consider ways of allowing Console to be extended in end-user applications by allow "object" insertion capability if a tag like <navigation-tree name="console"> is seen multiple times. Perhaps on the second instance the original object can be returned?
* Integrate http://oss.metaparadigm.com/jmemprof/ open-source memory profiler intended for web application containers (like resin, tomcat, etc). Also take a look at the SUN HAT http://java.sun.com/people/billf/heap/.
* Take a look at http://xmljs.sourceforge.net/ for JavaScript XML parsing and record set management
* Take a look at http://www.duncanlamb.com/sdba/ for SDBA Revolution Instant Messaging Application Server and see if it's useful to create Sparx-based IM apps
* Add support for listeners in as many places in Sparx as makes sense -- e.g. for dialogs that don't want to be subclassed let them add DialogExecuteListener? DialogPopuplateListener? etc...
* Incorporate features from http://www.irongrid.com (IronEye SQL and IronEye Cache) into Console
* Take a look at http://www.softwareplanner.com to see what kinds of features from there can be added to Console, Beacon
* Create a console page that will show a list or statistics of all active scroll states (and ability to clear them/close them/etc).
* Add Label, AccessKey CSS attributes to allow keyboard navigation of forms
* Add keyboard navigation to navigation tree system (autogenerate JavaScript keyboard handlers that will call different pages)
* Add ID constants generator to Sparx components (just like Axiom components)
* Ensure that all validation functionality is removed from fields and placed into validator objects so that they can be reused in Axiom
* Used http://jakarta.apache.org/commons/fileupload/ to add file upload features
* Add DHTML popup calendar from http://students.infoiasi.ro/~mishoo/site/calendar/cal.html.
* Add execute, populate, and makeStateChanges interfaces that can be "registered" for dialogs -- to delegate these activities
* Convert all ValueSource objects so their default points to ValueSource.NULL_VALUE_SOURCE -- this will eliminate many "if null" checks
* Add DHTML feature to Dialogs so that hints can optional only show up when a control is being edited (instead of all the time)
* Add execution statistics to Dialogs in the same manner as the stats for SQL (collection using Logs, etc) -- need to know all the same type of info: #time executed, avg time to render, etc
* Add Portlet API implementation for "output" panels (http://www-3.ibm.com/software/webservers/portal/library/InfoCenter/wps/wpspapi.html).
* Add built-in wiki parsing for panels so any panel/page can parse and show Wiki content
* Add ability for pages' body to be read in from databases, URLs, etc as well as files and local xml content
* Add "concurrent users" into console (all people currently logged in, perhaps total time spent doing stuff, etc)
* Add capability for HTTP request parameters to be automatically populate into beans for dialog context liks Struts does
* Add permissions, conditionals, etc into navigation trees
* Add style='report' to the SelectField that would merge the functionality of the old ReportField into SelectField. Consider merging the ReportSelectedItemsField into the same function so that SelectField can do everything within itself.
* Add 'forward', 'action', tags to <page> in navigation tree and connect to <director>
* Add 'style-sheet' value source tag to <page>, <report> and other places where XSLT might be useful
* Add sorting to report data source (which should also use cookies to store active sort criteria)
* Add a 'tip of the day' feature to Console that would get general usage tips for Sparx, Axiom, etc.
* Add a 'development tip of the day' feature to Console that would give general software development tips
* Consider adding rich text editing field mode (for field.memo) for IE/Moz using examples at http://www.kevinroth.com/rte/demo.htm and http://www.bris.ac.uk/is/projects/cms/ttw/ttw.html
* Consider using Jakarta Commons VFS (http://jakarta.apache.org/commons/sandbox/vfs/api.html) for panel body source locations so that they can be obtained from anywhere
* Allow documentation panels in console which borrow ideas from Sparx 2.0 documentation (summary blocks, XSL, etc)
* Add <panel-type>, <page-type> and other style page templates
* Look at Struts' MessageResources class for creating and 'rb' (resource-bundle) value source for internationlization
* Add DCB's that can populate actions
* Create demo Sparx using CD manager example in Sue Spielman's Struts book -- maybe other e.g.'s like that?
* Add getNavigationContext() as a member of ReportContext and DialogContext -- may return null if not using navigator
* Allow navigation trees and other tags to be "open" -- meaning if they're defined more than once their definitions are extended not replaced.
* Use XDoclet for generating TLD files -- using appropriate merge points.
* Consider using XDoclet for generation of DTD files and XSDs.
* Consider adding struts-style plugins?
* Implement JavaScript menu system using http://www.cs.ucla.edu/~heng/JSCookMenu/ (free for use)
* Add data browser like http://www.jetools.com/products/databrowser/ to Console (research other tools as well)
* Review Jakarta Commons Messenger (http://jakarta.apache.org/commons/sandbox/messenger/index.html) for JMS processing via Servlet container (very cool)
* Review Jakarta Commons Resources (http://jakarta.apache.org/commons/sandbox/resources/index.html) for internationalization (i18n) of message strings
* Review Logidex Asset Center (http://www.logiclibrary.com) to see if we can use JavaDoc tags to create similar asset manager for Sparx code in Console
* Incorporate JDiff (http://javadiff.sourceforge.net/) documentation between releases
* See if it makes sense to include Jamon (http://www.jamon.org) as a template engine option
* Might be interesting to see if Sparx can work with x-Desktop (http://www.x-desktop.org/).
* Review XP stories and scenarios capture methodology described in http://www.agilealliance.com/articles/articles/breitman.pdf and implement as new Sparx feature for capturing requirements and traceability

BUGS
* SelectField:
1. When choices are pure text (e.g. choices="Choice1=A;Choice2=B") without using the text-list value source, an ArrayIndexOutofBound exception is thrown instead of taking the choices string as a list with only one item. The same thing holds true for the default attribute also.
	java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.RangeCheck(ArrayList.java:508)
	at java.util.ArrayList.get(ArrayList.java:320)
	at com.netspective.commons.value.AbstractValue.getTextValue(AbstractValue.java:113)
	at com.netspective.commons.value.PresentationValue.getTextValue(PresentationValue.java:219)
	at com.netspective.commons.value.PresentationValue.getItems(PresentationValue.java:180)
	at com.netspective.sparx.form.field.type.SelectField.renderControlHtml(SelectField.java:509)
2. style="popup" doesn't  show the popup icon. EASY FIX: The popup icon is missing in the theme folder! Do we have a new pretty icon??!!
3. When choices attribute is set to a query that doesn't exist, an exception is thrown on the screen and the dialog isn't drawn.
	java.lang.NullPointerException
	at com.netspective.axiom.sql.Query.translateNameForMapKey(Query.java:168)
	at com.netspective.axiom.SqlManager.getQuery(SqlManager.java:131)
	at com.netspective.axiom.value.source.QueryResultsValueSource.getQueryResults(QueryResultsValueSource.java:281)
	at com.netspective.axiom.value.source.QueryResultsValueSource.getPresentationValue(QueryResultsValueSource.java:464)
	at com.netspective.commons.value.source.AbstractValueSource.getPresentationItem(AbstractValueSource.java:100)
	at com.netspective.sparx.form.field.type.SelectField.populateValue(SelectField.java:396)
This problem was  made more 'user-friendly':
    java.lang.RuntimeException: Unable to locate Query 'null' in SQL Manager
but this still throws a RTE so the question is do we want to catch this and not show it on the screen or make the value
source return an empty string???


* Query Defn
1. When adding query-defn into XML and you don't include a 'name' element (using 'id' mistkenly), it throws a really bad error
instead of complaining about not having a 'name' element.
java.lang.NullPointerException
        at com.netspective.axiom.sql.dynamic.QueryDefinition.translateNameForMapKey(QueryDefinition.java:118)
        at com.netspective.axiom.sql.dynamic.QueryDefinition.getNameForMapKey(QueryDefinition.java:128)
        at com.netspective.axiom.sql.collection.QueryDefinitionsCollection.add(QueryDefinitionsCollection.java:68)
        at com.netspective.axiom.SqlManager.addQueryDefn(SqlManager.java:229)





