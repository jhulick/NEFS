* [IMPORTANT] review http://www.javapractices.com/index.cjp "Servlets and JSPs" section best practices to ensure we're not missing anything major (especially http://www.javapractices.com/Topic137.cjp)
* [IMPORTANT] verify that console dialogs do not run outside of console (app shouldn't run them -- for security)

* Add amount of available/total memory available on Console home page (see http://www.javapractices.com/Topic83.cjp pattern)
* Run ChangeLog on local CVS repository in NBCS to make sure all changes are propogated to Sparx 7.0 from NBCS Sparx 2.3 branch.
* Add debug mode to pages that will show the location, class, and other data about each element (such where a panel is coming from) -- maybe even a DebugFlags for NavigationTree
* Add XML skins to SQL reports so that statements can emit XML and be associated with a stylesheet for reports (all within XDM) -- is this similar to NBCS?

* Add style='report' to the SelectField that would merge the functionality of the old ReportField into SelectField. Consider merging the ReportSelectedItemsField into the same function so that SelectField can do everything within itself.
* Add sorting to report data source (which should also use cookies to store active sort criteria)
* Consider ways of allowing Console to be extended in end-user applications by allowing "object insertion" capability if a tag like <navigation-tree name="console"> is seen multiple times. Perhaps on the second instance the original object can be returned?
* Allow navigation trees and other tags to be "open" -- meaning if they're defined more than once their definitions are extended not replaced.
* Run through all the code to make sure all "TODO" tags are completed -- many of the TODO tags indicated code that hasn't been migrated over from 2.3 to 7.0.
* Add ability for pages' body to be read in from databases, URLs, etc as well as files and local xml content
* Add "concurrent users" into console (all people currently logged in, perhaps total time spent doing stuff, list of pages visited, etc)
* Create a console page that will show a list or statistics of all active scroll states (and ability to clear them/close them/etc).
* Add capability for HTTP request parameters to be automatically populate into beans for dialog context liks Struts does (general plumbing for this already available in NavigationPage)
* Ensure that all validation functionality is removed from fields and placed into validator objects so that they can be reused in Axiom
* Add feature to hide/disable submit buttons once the submit button is pressed (in case it takes time to submit something) -- perhaps replace button with "please wait..."
* Create a 16x16 Console icon that will appear in browser window tabs and URL address line
* Add keyboard navigation to navigation tree system (autogenerate JavaScript keyboard handlers that will call different pages)
* Consider adding rich text editing field mode (for field.memo) for IE/Moz using examples at http://www.interactivetools.com/products/htmlarea/ and http://www.kevinroth.com/rte/demo.htm and http://www.bris.ac.uk/is/projects/cms/ttw/ttw.html

* Create "Define, Declare, Test, Customize, Deploy" tutorials
* Add documentation capability to TemplateProducers and TemplateConsumers so that those documentation resources may be displayed in Console.

* Check out http://just4log.sourceforge.net/ features and incorporate them into Console
* Consider how to integrate http://jbpm.org/ (BPM) into Sparx
* Check out http://www.jmyra.com features and incorporate them into Console
* Start using http://jwebunit.sourceforge.net/ (JWebUnit) to automate web-based unit testing for Sparx
* Use http://erw.dsi.unimi.it/ (ERW) to help explain Axiom and its features, benefits, etc.
* Use http://informa.sourceforge.net/ RSS library to setup RSS panels that can connect to RSS channels via URLs or files
* Integrate http://oss.metaparadigm.com/jmemprof/ open-source memory profiler intended for web application containers (like resin, tomcat, etc). Also take a look at the SUN HAT http://java.sun.com/people/billf/heap/.
* Take a look at http://xmljs.sourceforge.net/ for JavaScript XML parsing and record set management
* Take a look at http://www.duncanlamb.com/sdba/ for SDBA Revolution Instant Messaging Application Server and see if it's useful to create Sparx-based IM apps
* Incorporate features from http://www.irongrid.com (IronEye SQL and IronEye Cache) into Console
* Take a look at http://www.softwareplanner.com to see what kinds of features from there can be added to Console, Beacon
* Use http://jakarta.apache.org/commons/fileupload/ to add file upload features
* Convert all ValueSource objects so their default points to ValueSource.NULL_VALUE_SOURCE -- this will eliminate many "if null" checks
* Add Portlet API implementation for "output" panels (http://www-3.ibm.com/software/webservers/portal/library/InfoCenter/wps/wpspapi.html).
* Add built-in wiki parsing for panels so any panel/page can parse and show Wiki content
* Add a 'tip of the day' feature to Console that would get general usage tips for Sparx, Axiom, etc.
* Add a 'development tip of the day' feature to Console that would give general software development tips
* Consider using Jakarta Commons VFS (http://jakarta.apache.org/commons/sandbox/vfs/api.html) for panel body source locations so that they can be obtained from anywhere
* Create Sparx demo using CD manager example in Sue Spielman's Struts book -- maybe other e.g.'s like that?
* Use XDoclet for generating TLD files -- using appropriate merge points.
* Consider using XDoclet for generation of DTD files and XSDs.
* Implement JavaScript menu system using http://www.cs.ucla.edu/~heng/JSCookMenu/ (free for use)
* Add data browser like http://www.jetools.com/products/databrowser/ to Console (research other tools as well)
* Review Jakarta Commons Messenger (http://jakarta.apache.org/commons/sandbox/messenger/index.html) for JMS processing via Servlet container (very cool)
* Review Logidex Asset Center (http://www.logiclibrary.com) to see if we can use JavaDoc tags to create similar asset manager for Sparx code in Console
* Incorporate JDiff (http://javadiff.sourceforge.net/) documentation between releases
* See if it makes sense to include Jamon (http://www.jamon.org) as a template engine option
* Might be interesting to see if Sparx can work with x-Desktop (http://www.x-desktop.org/).
* Review XP stories and scenarios capture methodology described in http://www.agilealliance.com/articles/articles/breitman.pdf and implement as new Sparx feature for capturing requirements and traceability
* Review http://www.globecom.se/tora/ to see if creating a Sparx-based version would sell