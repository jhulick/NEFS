* Add Label, AccessKey CSS attributes to allow keyboard navigation of forms
* Add keyboard navigation to navigation tree system (autogenerate JavaScript keyboard handlers that will call different pages)
* Add ID constants generator to Sparx components (just like Axiom components)
* Ensure that all validation functionality is removed from fields and placed into validator objects so that they can be reused in Axiom
* Add DHTML popup calendar from http://students.infoiasi.ro/~mishoo/site/calendar/cal.html.
* Add execute, populate, and makeStateChanges interfaces that can be "registered" for dialogs -- to delegate these activities
* Convert all ValueSource objects so their default points to ValueSource.NULL_VALUE_SOURCE -- this will eliminate many "if null" checks
* Add DHTML feature to Dialogs so that hints can optional only show up when a control is being edited (instead of all the time)
* Add execution statistics to Dialogs in the same manner as the stats for SQL (collection using Logs, etc) -- need to know all the same type of info: #time executed, avg time to render, etc
* Add Portlet API implementation for "output" panels (http://www-3.ibm.com/software/webservers/portal/library/InfoCenter/wps/wpspapi.html).
* Add built-in wiki parsing for panels so any panel/page can parse and show Wiki content
* Add ability for pages' body to be read in from databases, URLs, etc as well as files and local xml content
* Add "concurrent users" into console (all people currently logged in, perhaps total time spent doing stuff, etc)
* Add capability for HTTP request parameters to be automatically populate into beans for dialog context liks Struts does
* Add permissions, conditionals, etc into navigation trees
* Add style='report' to the SelectField that would merge the functionality of the old ReportField into SelectField. Consider merging the ReportSelectedItemsField into the same function so that SelectField can do everything within itself.
* Add 'forward', 'action', tags to <page> in navigation tree and connect to <director>
* Add 'style-sheet' value source tag to <page>, <report> and other places where XSLT might be useful
* Add sorting to report data source (which should also use cookies to store active sort criteria)
* Consider using Jakarta Commons VFS (http://jakarta.apache.org/commons/sandbox/vfs/api.html) for panel body source locations so that they can be obtained from anywhere
* Allow documentation panels in console which borrow ideas form Sparx 2.0 documentation (XSL, etc)
* Add <panel-type>, <page-type> and other style page templates
* Look at Struts' MessageResources class for creating and 'rb' (resource-bundle) value source for internationlization
* Add DCB's that can populate actions
* Create demo Sparx using CD manager example in Sue Spielman's Struts book -- maybe other e.g.'s like that?
* Add getNavigationContext() as a member of ReportContext and DialogContext -- may return null if not using navigator
* Allow navigation trees and other tags to be "open" -- meaning if they're defined more than once their definitions are extended not replaced.
* Use XDoclet for generating TLD files -- using appropriate merge points.
* Consider using XDoclet for generation of DTD files and XSDs.
* Consider adding struts-style plugins?
* Review Jakarta Commons Messenger (http://jakarta.apache.org/commons/sandbox/messenger/index.html) for JMS processing via Servlet container (very cool)
* Review Jakarta Commons Resources (http://jakarta.apache.org/commons/sandbox/resources/index.html) for internationalization (i18n) of message strings